version: "3.8"

services:
  myapp_server_ci:
    image: ${DOCKER_HUB_BACKEND}:staging
    container_name: backend_myapp_ci
    networks:
      traefik-net:
    ports:
      - ${SERVER_PORT_CI}:${SERVER_PORT_CI}
    command: uvicorn app.api.server:app --reload --workers 1 --host 0.0.0.0 --port ${SERVER_PORT_CI}
    # ? for some reason, we need to explicitly set CICD to be able to
    # ? use os.environ.get("CICD"), else it returns None when app.core.config is imported
    # set rest of env vars in azure pipeline variables instead.
    # (maybe they don't do anything anyway and are just read from env.ci??)
    environment:
      - CICD=1
    depends_on:
      - myapp_db_ci
      - myapp_frontend_ci # win some seconds by the time e2e runs
    restart: always
    labels:
      # Explicitly tell Traefik to expose this container
      - traefik.enable=true
      - traefik.http.routers.myapp.rule=Host(`myapp-backend.testing.localhost`)
      - traefik.docker.network=traefik-net
      - traefik.http.routers.myapp.entrypoints=websecure
      - traefik.http.routers.myapp.tls=true
      - traefik.http.services.myapp.loadbalancer.server.port=${SERVER_PORT_CI}

  myapp_db_ci:
    image: postgres:13-alpine
    container_name: postgres_db_myapp_ci
    user: postgres
    networks:
      traefik-net:
    environment:
      PGDATA: /var/lib/postgresql/data
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - ${DB_PORT_CI}:5432
    restart: always

  myapp_frontend_ci:
    image: ${DOCKER_HUB_FRONTEND}:staging
    container_name: myapp_frontend_myapp_ci
    networks:
      traefik-net:
    environment:
      - CICD=1
    env_file:
      - ./frontend/.env.ci
    depends_on:
      - myapp_db_ci
    restart: always
    labels:
      # Explicitly tell Traefik to expose this container
      - traefik.enable=true
      - traefik.http.routers.myappreact.rule=Host(`myapp-frontend.testing.localhost`)
      # we're NOT using nginx in dev Dockerfile, NOT 80
      - traefik.port=${FRONTEND_PORT_CI}
      - traefik.docker.network=traefik-net
      - traefik.http.routers.myappreact.entrypoints=websecure
      - traefik.http.routers.myappreact.tls=true
      - traefik.http.services.myappreact.loadbalancer.server.port=${FRONTEND_PORT_CI}

  myapp_puppeteer:
    container_name: puppeteer_ci
    network_mode: "host"
    build:
      context: ./e2e
      dockerfile: Dockerfile
      args:
        - HEADLESS=true
        - FRONTEND_URL=${FRONTEND_URL}
        - SERVER_PORT_CI=${SERVER_PORT_CI}
        - FRONTEND_PORT_CI=${FRONTEND_PORT_CI}
    command: tail -F anything # keep container running forever until we execute npm run test
    depends_on:
      - myapp_frontend_ci
      - myapp_server_ci

volumes:
  myapp_pg_data_ci:

networks:
  traefik-net:
    name: traefik-net
    external: true
