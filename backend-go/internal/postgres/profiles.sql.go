// Code generated by sqlc. DO NOT EDIT.
// source: profiles.sql

package main

import (
	"context"
	"database/sql"
	"time"
)

const createProfile = `-- name: CreateProfile :one
INSERT INTO profiles (full_name, phone_number, bio, image, user_id)
  VALUES ($1, $2, $3, $4, $5)
RETURNING
  id, full_name, phone_number, bio, image, user_id, created_at, updated_at
`

type CreateProfileParams struct {
	FullName    sql.NullString `db:"full_name"`
	PhoneNumber sql.NullString `db:"phone_number"`
	Bio         sql.NullString `db:"bio"`
	Image       sql.NullString `db:"image"`
	UserID      sql.NullInt32  `db:"user_id"`
}

func (q *Queries) CreateProfile(ctx context.Context, arg CreateProfileParams) (Profiles, error) {
	row := q.db.QueryRowContext(ctx, createProfile,
		arg.FullName,
		arg.PhoneNumber,
		arg.Bio,
		arg.Image,
		arg.UserID,
	)
	var i Profiles
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.PhoneNumber,
		&i.Bio,
		&i.Image,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProfileById = `-- name: GetProfileById :one
SELECT
  id, full_name, phone_number, bio, image, user_id, created_at, updated_at
FROM
  profiles
WHERE
  user_id = $1
`

func (q *Queries) GetProfileById(ctx context.Context, userID sql.NullInt32) (Profiles, error) {
	row := q.db.QueryRowContext(ctx, getProfileById, userID)
	var i Profiles
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.PhoneNumber,
		&i.Bio,
		&i.Image,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProfileByUsername = `-- name: GetProfileByUsername :one
SELECT
  p.id,
  u.email AS email,
  u.username AS username,
  full_name,
  phone_number,
  bio,
  image,
  user_id,
  p.created_at,
  p.updated_at
FROM
  profiles p
  INNER JOIN users u ON p.user_id = u.id
WHERE
  user_id = (
    SELECT
      id
    FROM
      users
    WHERE
      username = $1::text)
`

type GetProfileByUsernameRow struct {
	ID          int32          `db:"id"`
	Email       string         `db:"email"`
	Username    string         `db:"username"`
	FullName    sql.NullString `db:"full_name"`
	PhoneNumber sql.NullString `db:"phone_number"`
	Bio         sql.NullString `db:"bio"`
	Image       sql.NullString `db:"image"`
	UserID      sql.NullInt32  `db:"user_id"`
	CreatedAt   time.Time      `db:"created_at"`
	UpdatedAt   time.Time      `db:"updated_at"`
}

func (q *Queries) GetProfileByUsername(ctx context.Context, username string) (GetProfileByUsernameRow, error) {
	row := q.db.QueryRowContext(ctx, getProfileByUsername, username)
	var i GetProfileByUsernameRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.FullName,
		&i.PhoneNumber,
		&i.Bio,
		&i.Image,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateProfile = `-- name: UpdateProfile :one
UPDATE
  profiles
SET
  full_name = $1,
  phone_number = $2,
  bio = $3,
  image = $4
WHERE
  user_id = $5
RETURNING
  id, full_name, phone_number, bio, image, user_id, created_at, updated_at
`

type UpdateProfileParams struct {
	FullName    sql.NullString `db:"full_name"`
	PhoneNumber sql.NullString `db:"phone_number"`
	Bio         sql.NullString `db:"bio"`
	Image       sql.NullString `db:"image"`
	UserID      sql.NullInt32  `db:"user_id"`
}

func (q *Queries) UpdateProfile(ctx context.Context, arg UpdateProfileParams) (Profiles, error) {
	row := q.db.QueryRowContext(ctx, updateProfile,
		arg.FullName,
		arg.PhoneNumber,
		arg.Bio,
		arg.Image,
		arg.UserID,
	)
	var i Profiles
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.PhoneNumber,
		&i.Bio,
		&i.Image,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
