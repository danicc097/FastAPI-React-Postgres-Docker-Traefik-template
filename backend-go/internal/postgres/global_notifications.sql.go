// Code generated by sqlc. DO NOT EDIT.
// source: global_notifications.sql

package main

import (
	"context"
	"database/sql"
	"time"

	"github.com/lib/pq"
)

const checkHasNewNotifications = `-- name: CheckHasNewNotifications :one
SELECT
  EXISTS (
    SELECT
      1
    FROM
      global_notifications
    WHERE
      updated_at > $1
      AND receiver_role = ANY ($2::text[])) AS has_new_notifications
`

type CheckHasNewNotificationsParams struct {
	LastNotificationAt time.Time `db:"last_notification_at"`
	Roles              []string  `db:"roles"`
}

func (q *Queries) CheckHasNewNotifications(ctx context.Context, arg CheckHasNewNotificationsParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkHasNewNotifications, arg.LastNotificationAt, pq.Array(arg.Roles))
	var has_new_notifications bool
	err := row.Scan(&has_new_notifications)
	return has_new_notifications, err
}

const createNotification = `-- name: CreateNotification :one
INSERT INTO global_notifications (sender, receiver_role, title, body, label, link)
  VALUES ($1, $2, $3, $4, $5, $6)
RETURNING
  id, sender, receiver_role, title, body, label, link, created_at, updated_at
`

type CreateNotificationParams struct {
	Sender       sql.NullString `db:"sender"`
	ReceiverRole string         `db:"receiver_role"`
	Title        string         `db:"title"`
	Body         string         `db:"body"`
	Label        string         `db:"label"`
	Link         sql.NullString `db:"link"`
}

func (q *Queries) CreateNotification(ctx context.Context, arg CreateNotificationParams) (GlobalNotifications, error) {
	row := q.db.QueryRowContext(ctx, createNotification,
		arg.Sender,
		arg.ReceiverRole,
		arg.Title,
		arg.Body,
		arg.Label,
		arg.Link,
	)
	var i GlobalNotifications
	err := row.Scan(
		&i.ID,
		&i.Sender,
		&i.ReceiverRole,
		&i.Title,
		&i.Body,
		&i.Label,
		&i.Link,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteNotification = `-- name: DeleteNotification :exec
DELETE FROM global_notifications
WHERE id = $1
RETURNING
  id, sender, receiver_role, title, body, label, link, created_at, updated_at
`

func (q *Queries) DeleteNotification(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteNotification, id)
	return err
}

const getNotificationsByLastRead = `-- name: GetNotificationsByLastRead :many
SELECT
  notifications_feed.id, notifications_feed.sender, notifications_feed.receiver_role, notifications_feed.title, notifications_feed.body, notifications_feed.label, notifications_feed.link, notifications_feed.created_at, notifications_feed.updated_at, event_timestamp, event_type, gn.id, gn.sender, gn.receiver_role, gn.title, gn.body, gn.label, gn.link, gn.created_at, gn.updated_at, global_notifications.id, global_notifications.sender, global_notifications.receiver_role, global_notifications.title, global_notifications.body, global_notifications.label, global_notifications.link, global_notifications.created_at, global_notifications.updated_at,
  ROW_NUMBER() OVER (ORDER BY event_timestamp DESC) AS row_number
FROM ((
    -- Rows where the notification has been updated at some point.
    SELECT
      id, sender, receiver_role, title, body, label, link, created_at, updated_at,
      updated_at AS event_timestamp,
      -- define a new column ` + "`" + `` + "`" + `event_type` + "`" + `` + "`" + ` and set its value
      'is_update' AS event_type
    FROM
      global_notifications AS gn
    WHERE
      gn.updated_at > $1
      AND receiver_role = ANY ($2::text[])
      AND updated_at != created_at
    ORDER BY
      updated_at DESC
    LIMIT $3)
UNION (
  -- All rows.
  SELECT
    id, sender, receiver_role, title, body, label, link, created_at, updated_at,
    created_at AS event_timestamp,
    -- define a new column ` + "`" + `` + "`" + `event_type` + "`" + `` + "`" + ` and set its value
    'is_create' AS event_type
  FROM
    global_notifications
  WHERE
    created_at > $1
    AND receiver_role = ANY ($2::text[])
  ORDER BY
    created_at DESC
  LIMIT $3)) AS notifications_feed
ORDER BY
  event_timestamp DESC
LIMIT $3
`

type GetNotificationsByLastReadParams struct {
	LastNotificationAt time.Time `db:"last_notification_at"`
	Roles              []string  `db:"roles"`
	PageChunkSize      int32     `db:"page_chunk_size"`
}

type GetNotificationsByLastReadRow struct {
	ID             int32          `db:"id"`
	Sender         sql.NullString `db:"sender"`
	ReceiverRole   string         `db:"receiver_role"`
	Title          string         `db:"title"`
	Body           string         `db:"body"`
	Label          string         `db:"label"`
	Link           sql.NullString `db:"link"`
	CreatedAt      time.Time      `db:"created_at"`
	UpdatedAt      time.Time      `db:"updated_at"`
	EventTimestamp time.Time      `db:"event_timestamp"`
	EventType      interface{}    `db:"event_type"`
	ID_2           int32          `db:"id_2"`
	Sender_2       sql.NullString `db:"sender_2"`
	ReceiverRole_2 string         `db:"receiver_role_2"`
	Title_2        string         `db:"title_2"`
	Body_2         string         `db:"body_2"`
	Label_2        string         `db:"label_2"`
	Link_2         sql.NullString `db:"link_2"`
	CreatedAt_2    time.Time      `db:"created_at_2"`
	UpdatedAt_2    time.Time      `db:"updated_at_2"`
	ID_3           int32          `db:"id_3"`
	Sender_3       sql.NullString `db:"sender_3"`
	ReceiverRole_3 string         `db:"receiver_role_3"`
	Title_3        string         `db:"title_3"`
	Body_3         string         `db:"body_3"`
	Label_3        string         `db:"label_3"`
	Link_3         sql.NullString `db:"link_3"`
	CreatedAt_3    time.Time      `db:"created_at_3"`
	UpdatedAt_3    time.Time      `db:"updated_at_3"`
	RowNumber      int64          `db:"row_number"`
}

func (q *Queries) GetNotificationsByLastRead(ctx context.Context, arg GetNotificationsByLastReadParams) ([]GetNotificationsByLastReadRow, error) {
	rows, err := q.db.QueryContext(ctx, getNotificationsByLastRead, arg.LastNotificationAt, pq.Array(arg.Roles), arg.PageChunkSize)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetNotificationsByLastReadRow{}
	for rows.Next() {
		var i GetNotificationsByLastReadRow
		if err := rows.Scan(
			&i.ID,
			&i.Sender,
			&i.ReceiverRole,
			&i.Title,
			&i.Body,
			&i.Label,
			&i.Link,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.EventTimestamp,
			&i.EventType,
			&i.ID_2,
			&i.Sender_2,
			&i.ReceiverRole_2,
			&i.Title_2,
			&i.Body_2,
			&i.Label_2,
			&i.Link_2,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.ID_3,
			&i.Sender_3,
			&i.ReceiverRole_3,
			&i.Title_3,
			&i.Body_3,
			&i.Label_3,
			&i.Link_3,
			&i.CreatedAt_3,
			&i.UpdatedAt_3,
			&i.RowNumber,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNotificationsByStartingDate = `-- name: GetNotificationsByStartingDate :many
SELECT
  notifications_feed.id, notifications_feed.sender, notifications_feed.receiver_role, notifications_feed.title, notifications_feed.body, notifications_feed.label, notifications_feed.link, notifications_feed.created_at, notifications_feed.updated_at, event_timestamp, event_type, gn.id, gn.sender, gn.receiver_role, gn.title, gn.body, gn.label, gn.link, gn.created_at, gn.updated_at, global_notifications.id, global_notifications.sender, global_notifications.receiver_role, global_notifications.title, global_notifications.body, global_notifications.label, global_notifications.link, global_notifications.created_at, global_notifications.updated_at,
  ROW_NUMBER() OVER (ORDER BY event_timestamp DESC) AS row_number
FROM ((
    -- Rows where the notification has been updated at some point.
    SELECT
      id, sender, receiver_role, title, body, label, link, created_at, updated_at,
      updated_at AS event_timestamp,
      -- define a new column ` + "`" + `` + "`" + `event_type` + "`" + `` + "`" + ` and set its value
      'is_update' AS event_type
    FROM
      global_notifications AS gn
    WHERE
      gn.updated_at < $1
      AND receiver_role = ANY ($2::text[])
      AND updated_at != created_at
    ORDER BY
      updated_at DESC
    LIMIT $3)
UNION (
  -- All rows.
  SELECT
    id, sender, receiver_role, title, body, label, link, created_at, updated_at,
    created_at AS event_timestamp,
    -- define a new column ` + "`" + `` + "`" + `event_type` + "`" + `` + "`" + ` and set its value
    'is_create' AS event_type
  FROM
    global_notifications
  WHERE
    created_at < $1
    AND receiver_role = ANY ($2::text[])
  ORDER BY
    created_at DESC
  LIMIT $3)) AS notifications_feed
ORDER BY
  event_timestamp DESC
LIMIT $3
`

type GetNotificationsByStartingDateParams struct {
	StartingDate  time.Time `db:"starting_date"`
	Roles         []string  `db:"roles"`
	PageChunkSize int32     `db:"page_chunk_size"`
}

type GetNotificationsByStartingDateRow struct {
	ID             int32          `db:"id"`
	Sender         sql.NullString `db:"sender"`
	ReceiverRole   string         `db:"receiver_role"`
	Title          string         `db:"title"`
	Body           string         `db:"body"`
	Label          string         `db:"label"`
	Link           sql.NullString `db:"link"`
	CreatedAt      time.Time      `db:"created_at"`
	UpdatedAt      time.Time      `db:"updated_at"`
	EventTimestamp time.Time      `db:"event_timestamp"`
	EventType      interface{}    `db:"event_type"`
	ID_2           int32          `db:"id_2"`
	Sender_2       sql.NullString `db:"sender_2"`
	ReceiverRole_2 string         `db:"receiver_role_2"`
	Title_2        string         `db:"title_2"`
	Body_2         string         `db:"body_2"`
	Label_2        string         `db:"label_2"`
	Link_2         sql.NullString `db:"link_2"`
	CreatedAt_2    time.Time      `db:"created_at_2"`
	UpdatedAt_2    time.Time      `db:"updated_at_2"`
	ID_3           int32          `db:"id_3"`
	Sender_3       sql.NullString `db:"sender_3"`
	ReceiverRole_3 string         `db:"receiver_role_3"`
	Title_3        string         `db:"title_3"`
	Body_3         string         `db:"body_3"`
	Label_3        string         `db:"label_3"`
	Link_3         sql.NullString `db:"link_3"`
	CreatedAt_3    time.Time      `db:"created_at_3"`
	UpdatedAt_3    time.Time      `db:"updated_at_3"`
	RowNumber      int64          `db:"row_number"`
}

func (q *Queries) GetNotificationsByStartingDate(ctx context.Context, arg GetNotificationsByStartingDateParams) ([]GetNotificationsByStartingDateRow, error) {
	rows, err := q.db.QueryContext(ctx, getNotificationsByStartingDate, arg.StartingDate, pq.Array(arg.Roles), arg.PageChunkSize)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetNotificationsByStartingDateRow{}
	for rows.Next() {
		var i GetNotificationsByStartingDateRow
		if err := rows.Scan(
			&i.ID,
			&i.Sender,
			&i.ReceiverRole,
			&i.Title,
			&i.Body,
			&i.Label,
			&i.Link,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.EventTimestamp,
			&i.EventType,
			&i.ID_2,
			&i.Sender_2,
			&i.ReceiverRole_2,
			&i.Title_2,
			&i.Body_2,
			&i.Label_2,
			&i.Link_2,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.ID_3,
			&i.Sender_3,
			&i.ReceiverRole_3,
			&i.Title_3,
			&i.Body_3,
			&i.Label_3,
			&i.Link_3,
			&i.CreatedAt_3,
			&i.UpdatedAt_3,
			&i.RowNumber,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
