package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"time"
)

// User represents a row from 'public.users'.
type User struct {
	ID                 int       `json:"id"`                   // id
	Username           string    `json:"username"`             // username
	Email              string    `json:"email"`                // email
	Role               string    `json:"role"`                 // role
	IsVerified         bool      `json:"is_verified"`          // is_verified
	Salt               string    `json:"salt"`                 // salt
	Password           string    `json:"password"`             // password
	IsActive           bool      `json:"is_active"`            // is_active
	IsSuperuser        bool      `json:"is_superuser"`         // is_superuser
	LastNotificationAt time.Time `json:"last_notification_at"` // last_notification_at
	CreatedAt          time.Time `json:"created_at"`           // created_at
	UpdatedAt          time.Time `json:"updated_at"`           // updated_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the User exists in the database.
func (u *User) Exists() bool {
	return u._exists
}

// Deleted returns true when the User has been marked for deletion from
// the database.
func (u *User) Deleted() bool {
	return u._deleted
}

// Insert inserts the User to the database.
func (u *User) Insert(ctx context.Context, db DB) error {
	switch {
	case u._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case u._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.users (` +
		`username, email, role, is_verified, salt, password, is_active, is_superuser, last_notification_at, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11` +
		`) RETURNING id`
	// run
	logf(sqlstr, u.Username, u.Email, u.Role, u.IsVerified, u.Salt, u.Password, u.IsActive, u.IsSuperuser, u.LastNotificationAt, u.CreatedAt, u.UpdatedAt)
	if err := db.QueryRowContext(ctx, sqlstr, u.Username, u.Email, u.Role, u.IsVerified, u.Salt, u.Password, u.IsActive, u.IsSuperuser, u.LastNotificationAt, u.CreatedAt, u.UpdatedAt).Scan(&u.ID); err != nil {
		return logerror(err)
	}
	// set exists
	u._exists = true
	return nil
}

// Update updates a User in the database.
func (u *User) Update(ctx context.Context, db DB) error {
	switch {
	case !u._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case u._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.users SET ` +
		`username = $1, email = $2, role = $3, is_verified = $4, salt = $5, password = $6, is_active = $7, is_superuser = $8, last_notification_at = $9, created_at = $10, updated_at = $11 ` +
		`WHERE id = $12`
	// run
	logf(sqlstr, u.Username, u.Email, u.Role, u.IsVerified, u.Salt, u.Password, u.IsActive, u.IsSuperuser, u.LastNotificationAt, u.CreatedAt, u.UpdatedAt, u.ID)
	if _, err := db.ExecContext(ctx, sqlstr, u.Username, u.Email, u.Role, u.IsVerified, u.Salt, u.Password, u.IsActive, u.IsSuperuser, u.LastNotificationAt, u.CreatedAt, u.UpdatedAt, u.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the User to the database.
func (u *User) Save(ctx context.Context, db DB) error {
	if u.Exists() {
		return u.Update(ctx, db)
	}
	return u.Insert(ctx, db)
}

// Upsert performs an upsert for User.
func (u *User) Upsert(ctx context.Context, db DB) error {
	switch {
	case u._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.users (` +
		`id, username, email, role, is_verified, salt, password, is_active, is_superuser, last_notification_at, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`username = EXCLUDED.username, email = EXCLUDED.email, role = EXCLUDED.role, is_verified = EXCLUDED.is_verified, salt = EXCLUDED.salt, password = EXCLUDED.password, is_active = EXCLUDED.is_active, is_superuser = EXCLUDED.is_superuser, last_notification_at = EXCLUDED.last_notification_at, created_at = EXCLUDED.created_at, updated_at = EXCLUDED.updated_at `
	// run
	logf(sqlstr, u.ID, u.Username, u.Email, u.Role, u.IsVerified, u.Salt, u.Password, u.IsActive, u.IsSuperuser, u.LastNotificationAt, u.CreatedAt, u.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, u.ID, u.Username, u.Email, u.Role, u.IsVerified, u.Salt, u.Password, u.IsActive, u.IsSuperuser, u.LastNotificationAt, u.CreatedAt, u.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	u._exists = true
	return nil
}

// Delete deletes the User from the database.
func (u *User) Delete(ctx context.Context, db DB) error {
	switch {
	case !u._exists: // doesn't exist
		return nil
	case u._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.users ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, u.ID)
	if _, err := db.ExecContext(ctx, sqlstr, u.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	u._deleted = true
	return nil
}

// UserByEmail retrieves a row from 'public.users' as a User.
//
// Generated from index 'ix_users_email'.
func UserByEmail(ctx context.Context, db DB, email string) (*User, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, username, email, role, is_verified, salt, password, is_active, is_superuser, last_notification_at, created_at, updated_at ` +
		`FROM public.users ` +
		`WHERE email = $1`
	// run
	logf(sqlstr, email)
	u := User{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, email).Scan(&u.ID, &u.Username, &u.Email, &u.Role, &u.IsVerified, &u.Salt, &u.Password, &u.IsActive, &u.IsSuperuser, &u.LastNotificationAt, &u.CreatedAt, &u.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &u, nil
}

// UsersByLastNotificationAt retrieves a row from 'public.users' as a User.
//
// Generated from index 'ix_users_last_notification_at'.
func UsersByLastNotificationAt(ctx context.Context, db DB, lastNotificationAt time.Time) ([]*User, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, username, email, role, is_verified, salt, password, is_active, is_superuser, last_notification_at, created_at, updated_at ` +
		`FROM public.users ` +
		`WHERE last_notification_at = $1`
	// run
	logf(sqlstr, lastNotificationAt)
	rows, err := db.QueryContext(ctx, sqlstr, lastNotificationAt)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*User
	for rows.Next() {
		u := User{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&u.ID, &u.Username, &u.Email, &u.Role, &u.IsVerified, &u.Salt, &u.Password, &u.IsActive, &u.IsSuperuser, &u.LastNotificationAt, &u.CreatedAt, &u.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &u)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// UsersByRole retrieves a row from 'public.users' as a User.
//
// Generated from index 'ix_users_role'.
func UsersByRole(ctx context.Context, db DB, role string) ([]*User, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, username, email, role, is_verified, salt, password, is_active, is_superuser, last_notification_at, created_at, updated_at ` +
		`FROM public.users ` +
		`WHERE role = $1`
	// run
	logf(sqlstr, role)
	rows, err := db.QueryContext(ctx, sqlstr, role)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*User
	for rows.Next() {
		u := User{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&u.ID, &u.Username, &u.Email, &u.Role, &u.IsVerified, &u.Salt, &u.Password, &u.IsActive, &u.IsSuperuser, &u.LastNotificationAt, &u.CreatedAt, &u.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &u)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// UserByUsername retrieves a row from 'public.users' as a User.
//
// Generated from index 'ix_users_username'.
func UserByUsername(ctx context.Context, db DB, username string) (*User, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, username, email, role, is_verified, salt, password, is_active, is_superuser, last_notification_at, created_at, updated_at ` +
		`FROM public.users ` +
		`WHERE username = $1`
	// run
	logf(sqlstr, username)
	u := User{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, username).Scan(&u.ID, &u.Username, &u.Email, &u.Role, &u.IsVerified, &u.Salt, &u.Password, &u.IsActive, &u.IsSuperuser, &u.LastNotificationAt, &u.CreatedAt, &u.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &u, nil
}

// UserByID retrieves a row from 'public.users' as a User.
//
// Generated from index 'users_pkey'.
func UserByID(ctx context.Context, db DB, id int) (*User, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, username, email, role, is_verified, salt, password, is_active, is_superuser, last_notification_at, created_at, updated_at ` +
		`FROM public.users ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	u := User{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&u.ID, &u.Username, &u.Email, &u.Role, &u.IsVerified, &u.Salt, &u.Password, &u.IsActive, &u.IsSuperuser, &u.LastNotificationAt, &u.CreatedAt, &u.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &u, nil
}
