package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"time"
)

// GlobalNotification represents a row from 'public.global_notifications'.
type GlobalNotification struct {
	ID           int            `json:"id"`            // id
	Sender       sql.NullString `json:"sender"`        // sender
	ReceiverRole string         `json:"receiver_role"` // receiver_role
	Title        string         `json:"title"`         // title
	Body         string         `json:"body"`          // body
	Label        string         `json:"label"`         // label
	Link         sql.NullString `json:"link"`          // link
	CreatedAt    time.Time      `json:"created_at"`    // created_at
	UpdatedAt    time.Time      `json:"updated_at"`    // updated_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the GlobalNotification exists in the database.
func (gn *GlobalNotification) Exists() bool {
	return gn._exists
}

// Deleted returns true when the GlobalNotification has been marked for deletion from
// the database.
func (gn *GlobalNotification) Deleted() bool {
	return gn._deleted
}

// Insert inserts the GlobalNotification to the database.
func (gn *GlobalNotification) Insert(ctx context.Context, db DB) error {
	switch {
	case gn._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case gn._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.global_notifications (` +
		`sender, receiver_role, title, body, label, link, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8` +
		`) RETURNING id`
	// run
	logf(sqlstr, gn.Sender, gn.ReceiverRole, gn.Title, gn.Body, gn.Label, gn.Link, gn.CreatedAt, gn.UpdatedAt)
	if err := db.QueryRowContext(ctx, sqlstr, gn.Sender, gn.ReceiverRole, gn.Title, gn.Body, gn.Label, gn.Link, gn.CreatedAt, gn.UpdatedAt).Scan(&gn.ID); err != nil {
		return logerror(err)
	}
	// set exists
	gn._exists = true
	return nil
}

// Update updates a GlobalNotification in the database.
func (gn *GlobalNotification) Update(ctx context.Context, db DB) error {
	switch {
	case !gn._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case gn._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.global_notifications SET ` +
		`sender = $1, receiver_role = $2, title = $3, body = $4, label = $5, link = $6, created_at = $7, updated_at = $8 ` +
		`WHERE id = $9`
	// run
	logf(sqlstr, gn.Sender, gn.ReceiverRole, gn.Title, gn.Body, gn.Label, gn.Link, gn.CreatedAt, gn.UpdatedAt, gn.ID)
	if _, err := db.ExecContext(ctx, sqlstr, gn.Sender, gn.ReceiverRole, gn.Title, gn.Body, gn.Label, gn.Link, gn.CreatedAt, gn.UpdatedAt, gn.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the GlobalNotification to the database.
func (gn *GlobalNotification) Save(ctx context.Context, db DB) error {
	if gn.Exists() {
		return gn.Update(ctx, db)
	}
	return gn.Insert(ctx, db)
}

// Upsert performs an upsert for GlobalNotification.
func (gn *GlobalNotification) Upsert(ctx context.Context, db DB) error {
	switch {
	case gn._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.global_notifications (` +
		`id, sender, receiver_role, title, body, label, link, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`sender = EXCLUDED.sender, receiver_role = EXCLUDED.receiver_role, title = EXCLUDED.title, body = EXCLUDED.body, label = EXCLUDED.label, link = EXCLUDED.link, created_at = EXCLUDED.created_at, updated_at = EXCLUDED.updated_at `
	// run
	logf(sqlstr, gn.ID, gn.Sender, gn.ReceiverRole, gn.Title, gn.Body, gn.Label, gn.Link, gn.CreatedAt, gn.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, gn.ID, gn.Sender, gn.ReceiverRole, gn.Title, gn.Body, gn.Label, gn.Link, gn.CreatedAt, gn.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	gn._exists = true
	return nil
}

// Delete deletes the GlobalNotification from the database.
func (gn *GlobalNotification) Delete(ctx context.Context, db DB) error {
	switch {
	case !gn._exists: // doesn't exist
		return nil
	case gn._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.global_notifications ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, gn.ID)
	if _, err := db.ExecContext(ctx, sqlstr, gn.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	gn._deleted = true
	return nil
}

// GlobalNotificationByID retrieves a row from 'public.global_notifications' as a GlobalNotification.
//
// Generated from index 'global_notifications_pkey'.
func GlobalNotificationByID(ctx context.Context, db DB, id int) (*GlobalNotification, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, sender, receiver_role, title, body, label, link, created_at, updated_at ` +
		`FROM public.global_notifications ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	gn := GlobalNotification{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&gn.ID, &gn.Sender, &gn.ReceiverRole, &gn.Title, &gn.Body, &gn.Label, &gn.Link, &gn.CreatedAt, &gn.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &gn, nil
}

// GlobalNotificationsByCreatedAt retrieves a row from 'public.global_notifications' as a GlobalNotification.
//
// Generated from index 'ix_global_notifications_created_at'.
func GlobalNotificationsByCreatedAt(ctx context.Context, db DB, createdAt time.Time) ([]*GlobalNotification, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, sender, receiver_role, title, body, label, link, created_at, updated_at ` +
		`FROM public.global_notifications ` +
		`WHERE created_at = $1`
	// run
	logf(sqlstr, createdAt)
	rows, err := db.QueryContext(ctx, sqlstr, createdAt)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*GlobalNotification
	for rows.Next() {
		gn := GlobalNotification{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&gn.ID, &gn.Sender, &gn.ReceiverRole, &gn.Title, &gn.Body, &gn.Label, &gn.Link, &gn.CreatedAt, &gn.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &gn)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// GlobalNotificationsByReceiverRole retrieves a row from 'public.global_notifications' as a GlobalNotification.
//
// Generated from index 'ix_global_notifications_receiver_role'.
func GlobalNotificationsByReceiverRole(ctx context.Context, db DB, receiverRole string) ([]*GlobalNotification, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, sender, receiver_role, title, body, label, link, created_at, updated_at ` +
		`FROM public.global_notifications ` +
		`WHERE receiver_role = $1`
	// run
	logf(sqlstr, receiverRole)
	rows, err := db.QueryContext(ctx, sqlstr, receiverRole)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*GlobalNotification
	for rows.Next() {
		gn := GlobalNotification{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&gn.ID, &gn.Sender, &gn.ReceiverRole, &gn.Title, &gn.Body, &gn.Label, &gn.Link, &gn.CreatedAt, &gn.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &gn)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// GlobalNotificationsByUpdatedAt retrieves a row from 'public.global_notifications' as a GlobalNotification.
//
// Generated from index 'ix_global_notifications_updated_at'.
func GlobalNotificationsByUpdatedAt(ctx context.Context, db DB, updatedAt time.Time) ([]*GlobalNotification, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, sender, receiver_role, title, body, label, link, created_at, updated_at ` +
		`FROM public.global_notifications ` +
		`WHERE updated_at = $1`
	// run
	logf(sqlstr, updatedAt)
	rows, err := db.QueryContext(ctx, sqlstr, updatedAt)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*GlobalNotification
	for rows.Next() {
		gn := GlobalNotification{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&gn.ID, &gn.Sender, &gn.ReceiverRole, &gn.Title, &gn.Body, &gn.Label, &gn.Link, &gn.CreatedAt, &gn.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &gn)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// GlobalNotificationsByCreatedAtReceiverRole retrieves a row from 'public.global_notifications' as a GlobalNotification.
//
// Generated from index 'notifications_created_at_receiver_role'.
func GlobalNotificationsByCreatedAtReceiverRole(ctx context.Context, db DB, createdAt time.Time, receiverRole string) ([]*GlobalNotification, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, sender, receiver_role, title, body, label, link, created_at, updated_at ` +
		`FROM public.global_notifications ` +
		`WHERE created_at = $1 AND receiver_role = $2`
	// run
	logf(sqlstr, createdAt, receiverRole)
	rows, err := db.QueryContext(ctx, sqlstr, createdAt, receiverRole)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*GlobalNotification
	for rows.Next() {
		gn := GlobalNotification{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&gn.ID, &gn.Sender, &gn.ReceiverRole, &gn.Title, &gn.Body, &gn.Label, &gn.Link, &gn.CreatedAt, &gn.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &gn)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// User returns the User associated with the GlobalNotification's (Sender).
//
// Generated from foreign key 'global_notifications_sender_fkey'.
func (gn *GlobalNotification) User(ctx context.Context, db DB) (*User, error) {
	return UserByEmail(ctx, db, gn.Sender.String)
}
