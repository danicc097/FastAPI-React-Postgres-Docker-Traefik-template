// Package Schema provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package Schema

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	OAuth2PasswordBearerScopes = "OAuth2PasswordBearer.Scopes"
)

// ``access_token``: allows for flexibility to modify our authentication system.
type AccessToken struct {
	AccessToken string `json:"access_token"`
	TokenType   string `json:"token_type"`
}

// BodyAdminResetUserPasswordByEmailApiAdminResetUserPasswordPost defines model for Body_admin_reset_user_password_by_email_api_admin_reset_user_password__post.
type BodyAdminResetUserPasswordByEmailApiAdminResetUserPasswordPost struct {
	Email openapi_types.Email `json:"email"`
}

// BodyAdminVerifyUsersByEmailApiAdminUsersUnverifiedPost defines model for Body_admin_verify_users_by_email_api_admin_users_unverified__post.
type BodyAdminVerifyUsersByEmailApiAdminUsersUnverifiedPost struct {
	UserEmails []string `json:"user_emails"`
}

// BodyProfilesUpdateOwnProfileApiProfilesMePut defines model for Body_profiles_update_own_profile_api_profiles_me__put.
type BodyProfilesUpdateOwnProfileApiProfilesMePut struct {
	// Allow users to update any or no fields, as long as it's not user_id
	ProfileUpdate ProfileUpdate `json:"profile_update"`
}

// BodyUsersLoginEmailAndPasswordApiUsersLoginTokenPost defines model for Body_users_login_email_and_password_api_users_login_token__post.
type BodyUsersLoginEmailAndPasswordApiUsersLoginTokenPost struct {
	ClientId     *string `json:"client_id,omitempty"`
	ClientSecret *string `json:"client_secret,omitempty"`
	GrantType    *string `json:"grant_type,omitempty"`
	Password     string  `json:"password"`
	Scope        *string `json:"scope,omitempty"`
	Username     string  `json:"username"`
}

// BodyUsersRegisterNewUserApiUsersPost defines model for Body_users_register_new_user_api_users__post.
type BodyUsersRegisterNewUserApiUsersPost struct {
	// Email, username, and password are required for registering a new user
	NewUser UserCreate `json:"new_user"`
}

// BodyUsersRequestPasswordResetApiUsersRequestPasswordResetPost defines model for Body_users_request_password_reset_api_users_request_password_reset__post.
type BodyUsersRequestPasswordResetApiUsersRequestPasswordResetPost struct {
	// Users can request a password reset to an administrator.
	PasswordRequest PasswordResetRequestCreate `json:"password_request"`
}

// BodyUsersUpdateUserByIdApiUsersMePut defines model for Body_users_update_user_by_id_api_users_me__put.
type BodyUsersUpdateUserByIdApiUsersMePut struct {
	// Users are allowed to update their email, username or password
	UserUpdate UserUpdate `json:"user_update"`
}

// HTTPValidationError defines model for HTTPValidationError.
type HTTPValidationError struct {
	Detail *[]ValidationError `json:"detail,omitempty"`
}

// Users can request a password reset to an administrator.
type PasswordResetRequest struct {
	CreatedAt *time.Time          `json:"created_at,omitempty"`
	Email     openapi_types.Email `json:"email"`
	Id        int                 `json:"id"`
	Message   string              `json:"message"`
	UpdatedAt *time.Time          `json:"updated_at,omitempty"`
}

// Users can request a password reset to an administrator.
type PasswordResetRequestCreate struct {
	Email   openapi_types.Email `json:"email"`
	Message string              `json:"message"`
}

// To be used by all models that have an ID primary key column.
type ProfilePublic struct {
	Bio         *string              `json:"bio,omitempty"`
	CreatedAt   *time.Time           `json:"created_at,omitempty"`
	Email       *openapi_types.Email `json:"email,omitempty"`
	FullName    *string              `json:"full_name,omitempty"`
	Id          int                  `json:"id"`
	Image       *string              `json:"image,omitempty"`
	PhoneNumber *string              `json:"phone_number,omitempty"`
	UpdatedAt   *time.Time           `json:"updated_at,omitempty"`
	UserId      int                  `json:"user_id"`
	Username    *string              `json:"username,omitempty"`
}

// Allow users to update any or no fields, as long as it's not user_id
type ProfileUpdate struct {
	Bio         *string `json:"bio,omitempty"`
	FullName    *string `json:"full_name,omitempty"`
	Image       *string `json:"image,omitempty"`
	PhoneNumber *string `json:"phone_number,omitempty"`
}

// Email, username, and password are required for registering a new user
type UserCreate struct {
	Email    openapi_types.Email `json:"email"`
	Password string              `json:"password"`
	Username string              `json:"username"`
}

// By accepting an optional access_token attribute, we can now return the
// user along with their token as soon as they've registered.
// We also have the ability to attach a user profile
type UserPublic struct {
	// ``access_token``: allows for flexibility to modify our authentication system.
	AccessToken   *AccessToken         `json:"access_token,omitempty"`
	CreatedAt     *time.Time           `json:"created_at,omitempty"`
	Email         *openapi_types.Email `json:"email,omitempty"`
	EmailVerified *bool                `json:"is_verified,omitempty"`
	Id            int                  `json:"id"`
	IsActive      *bool                `json:"is_active,omitempty"`
	IsSuperuser   *bool                `json:"is_superuser,omitempty"`

	// To be used by all models that have an ID primary key column.
	Profile   *ProfilePublic `json:"profile,omitempty"`
	UpdatedAt *time.Time     `json:"updated_at,omitempty"`
	Username  *string        `json:"username,omitempty"`
}

// Users are allowed to update their email, username or password
type UserUpdate struct {
	Email       *openapi_types.Email `json:"email,omitempty"`
	OldPassword *string              `json:"old_password,omitempty"`
	Password    *string              `json:"password,omitempty"`
	Username    *string              `json:"username,omitempty"`
}

// ValidationError defines model for ValidationError.
type ValidationError struct {
	Loc  []string `json:"loc"`
	Msg  string   `json:"msg"`
	Type string   `json:"type"`
}

// AdminResetUserPasswordByEmailApiAdminResetUserPasswordPostJSONBody defines parameters for AdminResetUserPasswordByEmailApiAdminResetUserPasswordPost.
type AdminResetUserPasswordByEmailApiAdminResetUserPasswordPostJSONBody BodyAdminResetUserPasswordByEmailApiAdminResetUserPasswordPost

// AdminVerifyUsersByEmailApiAdminUsersUnverifiedPostJSONBody defines parameters for AdminVerifyUsersByEmailApiAdminUsersUnverifiedPost.
type AdminVerifyUsersByEmailApiAdminUsersUnverifiedPostJSONBody BodyAdminVerifyUsersByEmailApiAdminUsersUnverifiedPost

// ProfilesUpdateOwnProfileApiProfilesMePutJSONBody defines parameters for ProfilesUpdateOwnProfileApiProfilesMePut.
type ProfilesUpdateOwnProfileApiProfilesMePutJSONBody BodyProfilesUpdateOwnProfileApiProfilesMePut

// UsersRegisterNewUserApiUsersPostJSONBody defines parameters for UsersRegisterNewUserApiUsersPost.
type UsersRegisterNewUserApiUsersPostJSONBody BodyUsersRegisterNewUserApiUsersPost

// UsersUpdateUserByIdApiUsersMePutJSONBody defines parameters for UsersUpdateUserByIdApiUsersMePut.
type UsersUpdateUserByIdApiUsersMePutJSONBody BodyUsersUpdateUserByIdApiUsersMePut

// UsersRequestPasswordResetApiUsersRequestPasswordResetPostJSONBody defines parameters for UsersRequestPasswordResetApiUsersRequestPasswordResetPost.
type UsersRequestPasswordResetApiUsersRequestPasswordResetPostJSONBody BodyUsersRequestPasswordResetApiUsersRequestPasswordResetPost

// AdminResetUserPasswordByEmailApiAdminResetUserPasswordPostJSONRequestBody defines body for AdminResetUserPasswordByEmailApiAdminResetUserPasswordPost for application/json ContentType.
type AdminResetUserPasswordByEmailApiAdminResetUserPasswordPostJSONRequestBody AdminResetUserPasswordByEmailApiAdminResetUserPasswordPostJSONBody

// AdminVerifyUsersByEmailApiAdminUsersUnverifiedPostJSONRequestBody defines body for AdminVerifyUsersByEmailApiAdminUsersUnverifiedPost for application/json ContentType.
type AdminVerifyUsersByEmailApiAdminUsersUnverifiedPostJSONRequestBody AdminVerifyUsersByEmailApiAdminUsersUnverifiedPostJSONBody

// ProfilesUpdateOwnProfileApiProfilesMePutJSONRequestBody defines body for ProfilesUpdateOwnProfileApiProfilesMePut for application/json ContentType.
type ProfilesUpdateOwnProfileApiProfilesMePutJSONRequestBody ProfilesUpdateOwnProfileApiProfilesMePutJSONBody

// UsersRegisterNewUserApiUsersPostJSONRequestBody defines body for UsersRegisterNewUserApiUsersPost for application/json ContentType.
type UsersRegisterNewUserApiUsersPostJSONRequestBody UsersRegisterNewUserApiUsersPostJSONBody

// UsersUpdateUserByIdApiUsersMePutJSONRequestBody defines body for UsersUpdateUserByIdApiUsersMePut for application/json ContentType.
type UsersUpdateUserByIdApiUsersMePutJSONRequestBody UsersUpdateUserByIdApiUsersMePutJSONBody

// UsersRequestPasswordResetApiUsersRequestPasswordResetPostJSONRequestBody defines body for UsersRequestPasswordResetApiUsersRequestPasswordResetPost for application/json ContentType.
type UsersRequestPasswordResetApiUsersRequestPasswordResetPostJSONRequestBody UsersRequestPasswordResetApiUsersRequestPasswordResetPostJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// AdminDeletePasswordResetRequestApiAdminDeletePasswordResetRequestIdDelete request
	AdminDeletePasswordResetRequestApiAdminDeletePasswordResetRequestIdDelete(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminListPasswordRequestUsersApiAdminResetUserPasswordGet request
	AdminListPasswordRequestUsersApiAdminResetUserPasswordGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminResetUserPasswordByEmailApiAdminResetUserPasswordPost request with any body
	AdminResetUserPasswordByEmailApiAdminResetUserPasswordPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AdminResetUserPasswordByEmailApiAdminResetUserPasswordPost(ctx context.Context, body AdminResetUserPasswordByEmailApiAdminResetUserPasswordPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminListUnverifiedUsersApiAdminUsersUnverifiedGet request
	AdminListUnverifiedUsersApiAdminUsersUnverifiedGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminVerifyUsersByEmailApiAdminUsersUnverifiedPost request with any body
	AdminVerifyUsersByEmailApiAdminUsersUnverifiedPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AdminVerifyUsersByEmailApiAdminUsersUnverifiedPost(ctx context.Context, body AdminVerifyUsersByEmailApiAdminUsersUnverifiedPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminListUsersApiAdminUsersGet request
	AdminListUsersApiAdminUsersGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProfilesUpdateOwnProfileApiProfilesMePut request with any body
	ProfilesUpdateOwnProfileApiProfilesMePutWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProfilesUpdateOwnProfileApiProfilesMePut(ctx context.Context, body ProfilesUpdateOwnProfileApiProfilesMePutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProfilesGetProfileByUsernameApiProfilesUsernameGet request
	ProfilesGetProfileByUsernameApiProfilesUsernameGet(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersRegisterNewUserApiUsersPost request with any body
	UsersRegisterNewUserApiUsersPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UsersRegisterNewUserApiUsersPost(ctx context.Context, body UsersRegisterNewUserApiUsersPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersLoginEmailAndPasswordApiUsersLoginTokenPost request with any body
	UsersLoginEmailAndPasswordApiUsersLoginTokenPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersGetCurrentUserApiUsersMeGet request
	UsersGetCurrentUserApiUsersMeGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersUpdateUserByIdApiUsersMePut request with any body
	UsersUpdateUserByIdApiUsersMePutWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UsersUpdateUserByIdApiUsersMePut(ctx context.Context, body UsersUpdateUserByIdApiUsersMePutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersRequestPasswordResetApiUsersRequestPasswordResetPost request with any body
	UsersRequestPasswordResetApiUsersRequestPasswordResetPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UsersRequestPasswordResetApiUsersRequestPasswordResetPost(ctx context.Context, body UsersRequestPasswordResetApiUsersRequestPasswordResetPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) AdminDeletePasswordResetRequestApiAdminDeletePasswordResetRequestIdDelete(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminDeletePasswordResetRequestApiAdminDeletePasswordResetRequestIdDeleteRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminListPasswordRequestUsersApiAdminResetUserPasswordGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminListPasswordRequestUsersApiAdminResetUserPasswordGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminResetUserPasswordByEmailApiAdminResetUserPasswordPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminResetUserPasswordByEmailApiAdminResetUserPasswordPostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminResetUserPasswordByEmailApiAdminResetUserPasswordPost(ctx context.Context, body AdminResetUserPasswordByEmailApiAdminResetUserPasswordPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminResetUserPasswordByEmailApiAdminResetUserPasswordPostRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminListUnverifiedUsersApiAdminUsersUnverifiedGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminListUnverifiedUsersApiAdminUsersUnverifiedGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminVerifyUsersByEmailApiAdminUsersUnverifiedPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminVerifyUsersByEmailApiAdminUsersUnverifiedPostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminVerifyUsersByEmailApiAdminUsersUnverifiedPost(ctx context.Context, body AdminVerifyUsersByEmailApiAdminUsersUnverifiedPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminVerifyUsersByEmailApiAdminUsersUnverifiedPostRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminListUsersApiAdminUsersGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminListUsersApiAdminUsersGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProfilesUpdateOwnProfileApiProfilesMePutWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProfilesUpdateOwnProfileApiProfilesMePutRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProfilesUpdateOwnProfileApiProfilesMePut(ctx context.Context, body ProfilesUpdateOwnProfileApiProfilesMePutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProfilesUpdateOwnProfileApiProfilesMePutRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProfilesGetProfileByUsernameApiProfilesUsernameGet(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProfilesGetProfileByUsernameApiProfilesUsernameGetRequest(c.Server, username)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersRegisterNewUserApiUsersPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersRegisterNewUserApiUsersPostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersRegisterNewUserApiUsersPost(ctx context.Context, body UsersRegisterNewUserApiUsersPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersRegisterNewUserApiUsersPostRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersLoginEmailAndPasswordApiUsersLoginTokenPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersLoginEmailAndPasswordApiUsersLoginTokenPostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersGetCurrentUserApiUsersMeGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersGetCurrentUserApiUsersMeGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersUpdateUserByIdApiUsersMePutWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersUpdateUserByIdApiUsersMePutRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersUpdateUserByIdApiUsersMePut(ctx context.Context, body UsersUpdateUserByIdApiUsersMePutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersUpdateUserByIdApiUsersMePutRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersRequestPasswordResetApiUsersRequestPasswordResetPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersRequestPasswordResetApiUsersRequestPasswordResetPostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersRequestPasswordResetApiUsersRequestPasswordResetPost(ctx context.Context, body UsersRequestPasswordResetApiUsersRequestPasswordResetPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersRequestPasswordResetApiUsersRequestPasswordResetPostRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewAdminDeletePasswordResetRequestApiAdminDeletePasswordResetRequestIdDeleteRequest generates requests for AdminDeletePasswordResetRequestApiAdminDeletePasswordResetRequestIdDelete
func NewAdminDeletePasswordResetRequestApiAdminDeletePasswordResetRequestIdDeleteRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/delete-password-reset-request/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAdminListPasswordRequestUsersApiAdminResetUserPasswordGetRequest generates requests for AdminListPasswordRequestUsersApiAdminResetUserPasswordGet
func NewAdminListPasswordRequestUsersApiAdminResetUserPasswordGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/reset-user-password/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAdminResetUserPasswordByEmailApiAdminResetUserPasswordPostRequest calls the generic AdminResetUserPasswordByEmailApiAdminResetUserPasswordPost builder with application/json body
func NewAdminResetUserPasswordByEmailApiAdminResetUserPasswordPostRequest(server string, body AdminResetUserPasswordByEmailApiAdminResetUserPasswordPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAdminResetUserPasswordByEmailApiAdminResetUserPasswordPostRequestWithBody(server, "application/json", bodyReader)
}

// NewAdminResetUserPasswordByEmailApiAdminResetUserPasswordPostRequestWithBody generates requests for AdminResetUserPasswordByEmailApiAdminResetUserPasswordPost with any type of body
func NewAdminResetUserPasswordByEmailApiAdminResetUserPasswordPostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/reset-user-password/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAdminListUnverifiedUsersApiAdminUsersUnverifiedGetRequest generates requests for AdminListUnverifiedUsersApiAdminUsersUnverifiedGet
func NewAdminListUnverifiedUsersApiAdminUsersUnverifiedGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/users-unverified/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAdminVerifyUsersByEmailApiAdminUsersUnverifiedPostRequest calls the generic AdminVerifyUsersByEmailApiAdminUsersUnverifiedPost builder with application/json body
func NewAdminVerifyUsersByEmailApiAdminUsersUnverifiedPostRequest(server string, body AdminVerifyUsersByEmailApiAdminUsersUnverifiedPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAdminVerifyUsersByEmailApiAdminUsersUnverifiedPostRequestWithBody(server, "application/json", bodyReader)
}

// NewAdminVerifyUsersByEmailApiAdminUsersUnverifiedPostRequestWithBody generates requests for AdminVerifyUsersByEmailApiAdminUsersUnverifiedPost with any type of body
func NewAdminVerifyUsersByEmailApiAdminUsersUnverifiedPostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/users-unverified/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAdminListUsersApiAdminUsersGetRequest generates requests for AdminListUsersApiAdminUsersGet
func NewAdminListUsersApiAdminUsersGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/users/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProfilesUpdateOwnProfileApiProfilesMePutRequest calls the generic ProfilesUpdateOwnProfileApiProfilesMePut builder with application/json body
func NewProfilesUpdateOwnProfileApiProfilesMePutRequest(server string, body ProfilesUpdateOwnProfileApiProfilesMePutJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewProfilesUpdateOwnProfileApiProfilesMePutRequestWithBody(server, "application/json", bodyReader)
}

// NewProfilesUpdateOwnProfileApiProfilesMePutRequestWithBody generates requests for ProfilesUpdateOwnProfileApiProfilesMePut with any type of body
func NewProfilesUpdateOwnProfileApiProfilesMePutRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/profiles/me/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewProfilesGetProfileByUsernameApiProfilesUsernameGetRequest generates requests for ProfilesGetProfileByUsernameApiProfilesUsernameGet
func NewProfilesGetProfileByUsernameApiProfilesUsernameGetRequest(server string, username string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/profiles/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersRegisterNewUserApiUsersPostRequest calls the generic UsersRegisterNewUserApiUsersPost builder with application/json body
func NewUsersRegisterNewUserApiUsersPostRequest(server string, body UsersRegisterNewUserApiUsersPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUsersRegisterNewUserApiUsersPostRequestWithBody(server, "application/json", bodyReader)
}

// NewUsersRegisterNewUserApiUsersPostRequestWithBody generates requests for UsersRegisterNewUserApiUsersPost with any type of body
func NewUsersRegisterNewUserApiUsersPostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/users/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUsersLoginEmailAndPasswordApiUsersLoginTokenPostRequestWithBody generates requests for UsersLoginEmailAndPasswordApiUsersLoginTokenPost with any type of body
func NewUsersLoginEmailAndPasswordApiUsersLoginTokenPostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/users/login/token/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUsersGetCurrentUserApiUsersMeGetRequest generates requests for UsersGetCurrentUserApiUsersMeGet
func NewUsersGetCurrentUserApiUsersMeGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/users/me/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersUpdateUserByIdApiUsersMePutRequest calls the generic UsersUpdateUserByIdApiUsersMePut builder with application/json body
func NewUsersUpdateUserByIdApiUsersMePutRequest(server string, body UsersUpdateUserByIdApiUsersMePutJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUsersUpdateUserByIdApiUsersMePutRequestWithBody(server, "application/json", bodyReader)
}

// NewUsersUpdateUserByIdApiUsersMePutRequestWithBody generates requests for UsersUpdateUserByIdApiUsersMePut with any type of body
func NewUsersUpdateUserByIdApiUsersMePutRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/users/me/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUsersRequestPasswordResetApiUsersRequestPasswordResetPostRequest calls the generic UsersRequestPasswordResetApiUsersRequestPasswordResetPost builder with application/json body
func NewUsersRequestPasswordResetApiUsersRequestPasswordResetPostRequest(server string, body UsersRequestPasswordResetApiUsersRequestPasswordResetPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUsersRequestPasswordResetApiUsersRequestPasswordResetPostRequestWithBody(server, "application/json", bodyReader)
}

// NewUsersRequestPasswordResetApiUsersRequestPasswordResetPostRequestWithBody generates requests for UsersRequestPasswordResetApiUsersRequestPasswordResetPost with any type of body
func NewUsersRequestPasswordResetApiUsersRequestPasswordResetPostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/users/request-password-reset/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// AdminDeletePasswordResetRequestApiAdminDeletePasswordResetRequestIdDelete request
	AdminDeletePasswordResetRequestApiAdminDeletePasswordResetRequestIdDeleteWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*AdminDeletePasswordResetRequestApiAdminDeletePasswordResetRequestIdDeleteResponse, error)

	// AdminListPasswordRequestUsersApiAdminResetUserPasswordGet request
	AdminListPasswordRequestUsersApiAdminResetUserPasswordGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AdminListPasswordRequestUsersApiAdminResetUserPasswordGetResponse, error)

	// AdminResetUserPasswordByEmailApiAdminResetUserPasswordPost request with any body
	AdminResetUserPasswordByEmailApiAdminResetUserPasswordPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminResetUserPasswordByEmailApiAdminResetUserPasswordPostResponse, error)

	AdminResetUserPasswordByEmailApiAdminResetUserPasswordPostWithResponse(ctx context.Context, body AdminResetUserPasswordByEmailApiAdminResetUserPasswordPostJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminResetUserPasswordByEmailApiAdminResetUserPasswordPostResponse, error)

	// AdminListUnverifiedUsersApiAdminUsersUnverifiedGet request
	AdminListUnverifiedUsersApiAdminUsersUnverifiedGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AdminListUnverifiedUsersApiAdminUsersUnverifiedGetResponse, error)

	// AdminVerifyUsersByEmailApiAdminUsersUnverifiedPost request with any body
	AdminVerifyUsersByEmailApiAdminUsersUnverifiedPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminVerifyUsersByEmailApiAdminUsersUnverifiedPostResponse, error)

	AdminVerifyUsersByEmailApiAdminUsersUnverifiedPostWithResponse(ctx context.Context, body AdminVerifyUsersByEmailApiAdminUsersUnverifiedPostJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminVerifyUsersByEmailApiAdminUsersUnverifiedPostResponse, error)

	// AdminListUsersApiAdminUsersGet request
	AdminListUsersApiAdminUsersGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AdminListUsersApiAdminUsersGetResponse, error)

	// ProfilesUpdateOwnProfileApiProfilesMePut request with any body
	ProfilesUpdateOwnProfileApiProfilesMePutWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProfilesUpdateOwnProfileApiProfilesMePutResponse, error)

	ProfilesUpdateOwnProfileApiProfilesMePutWithResponse(ctx context.Context, body ProfilesUpdateOwnProfileApiProfilesMePutJSONRequestBody, reqEditors ...RequestEditorFn) (*ProfilesUpdateOwnProfileApiProfilesMePutResponse, error)

	// ProfilesGetProfileByUsernameApiProfilesUsernameGet request
	ProfilesGetProfileByUsernameApiProfilesUsernameGetWithResponse(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*ProfilesGetProfileByUsernameApiProfilesUsernameGetResponse, error)

	// UsersRegisterNewUserApiUsersPost request with any body
	UsersRegisterNewUserApiUsersPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersRegisterNewUserApiUsersPostResponse, error)

	UsersRegisterNewUserApiUsersPostWithResponse(ctx context.Context, body UsersRegisterNewUserApiUsersPostJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersRegisterNewUserApiUsersPostResponse, error)

	// UsersLoginEmailAndPasswordApiUsersLoginTokenPost request with any body
	UsersLoginEmailAndPasswordApiUsersLoginTokenPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersLoginEmailAndPasswordApiUsersLoginTokenPostResponse, error)

	// UsersGetCurrentUserApiUsersMeGet request
	UsersGetCurrentUserApiUsersMeGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*UsersGetCurrentUserApiUsersMeGetResponse, error)

	// UsersUpdateUserByIdApiUsersMePut request with any body
	UsersUpdateUserByIdApiUsersMePutWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersUpdateUserByIdApiUsersMePutResponse, error)

	UsersUpdateUserByIdApiUsersMePutWithResponse(ctx context.Context, body UsersUpdateUserByIdApiUsersMePutJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersUpdateUserByIdApiUsersMePutResponse, error)

	// UsersRequestPasswordResetApiUsersRequestPasswordResetPost request with any body
	UsersRequestPasswordResetApiUsersRequestPasswordResetPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersRequestPasswordResetApiUsersRequestPasswordResetPostResponse, error)

	UsersRequestPasswordResetApiUsersRequestPasswordResetPostWithResponse(ctx context.Context, body UsersRequestPasswordResetApiUsersRequestPasswordResetPostJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersRequestPasswordResetApiUsersRequestPasswordResetPostResponse, error)
}

type AdminDeletePasswordResetRequestApiAdminDeletePasswordResetRequestIdDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PasswordResetRequest
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r AdminDeletePasswordResetRequestApiAdminDeletePasswordResetRequestIdDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminDeletePasswordResetRequestApiAdminDeletePasswordResetRequestIdDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminListPasswordRequestUsersApiAdminResetUserPasswordGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PasswordResetRequest
}

// Status returns HTTPResponse.Status
func (r AdminListPasswordRequestUsersApiAdminResetUserPasswordGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminListPasswordRequestUsersApiAdminResetUserPasswordGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminResetUserPasswordByEmailApiAdminResetUserPasswordPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r AdminResetUserPasswordByEmailApiAdminResetUserPasswordPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminResetUserPasswordByEmailApiAdminResetUserPasswordPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminListUnverifiedUsersApiAdminUsersUnverifiedGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]UserPublic
}

// Status returns HTTPResponse.Status
func (r AdminListUnverifiedUsersApiAdminUsersUnverifiedGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminListUnverifiedUsersApiAdminUsersUnverifiedGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminVerifyUsersByEmailApiAdminUsersUnverifiedPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]UserPublic
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r AdminVerifyUsersByEmailApiAdminUsersUnverifiedPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminVerifyUsersByEmailApiAdminUsersUnverifiedPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminListUsersApiAdminUsersGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]UserPublic
}

// Status returns HTTPResponse.Status
func (r AdminListUsersApiAdminUsersGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminListUsersApiAdminUsersGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProfilesUpdateOwnProfileApiProfilesMePutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProfilePublic
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r ProfilesUpdateOwnProfileApiProfilesMePutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProfilesUpdateOwnProfileApiProfilesMePutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProfilesGetProfileByUsernameApiProfilesUsernameGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProfilePublic
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r ProfilesGetProfileByUsernameApiProfilesUsernameGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProfilesGetProfileByUsernameApiProfilesUsernameGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersRegisterNewUserApiUsersPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *UserPublic
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r UsersRegisterNewUserApiUsersPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersRegisterNewUserApiUsersPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersLoginEmailAndPasswordApiUsersLoginTokenPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccessToken
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r UsersLoginEmailAndPasswordApiUsersLoginTokenPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersLoginEmailAndPasswordApiUsersLoginTokenPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersGetCurrentUserApiUsersMeGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserPublic
}

// Status returns HTTPResponse.Status
func (r UsersGetCurrentUserApiUsersMeGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersGetCurrentUserApiUsersMeGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersUpdateUserByIdApiUsersMePutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserPublic
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r UsersUpdateUserByIdApiUsersMePutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersUpdateUserByIdApiUsersMePutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersRequestPasswordResetApiUsersRequestPasswordResetPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PasswordResetRequest
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r UsersRequestPasswordResetApiUsersRequestPasswordResetPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersRequestPasswordResetApiUsersRequestPasswordResetPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// AdminDeletePasswordResetRequestApiAdminDeletePasswordResetRequestIdDeleteWithResponse request returning *AdminDeletePasswordResetRequestApiAdminDeletePasswordResetRequestIdDeleteResponse
func (c *ClientWithResponses) AdminDeletePasswordResetRequestApiAdminDeletePasswordResetRequestIdDeleteWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*AdminDeletePasswordResetRequestApiAdminDeletePasswordResetRequestIdDeleteResponse, error) {
	rsp, err := c.AdminDeletePasswordResetRequestApiAdminDeletePasswordResetRequestIdDelete(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminDeletePasswordResetRequestApiAdminDeletePasswordResetRequestIdDeleteResponse(rsp)
}

// AdminListPasswordRequestUsersApiAdminResetUserPasswordGetWithResponse request returning *AdminListPasswordRequestUsersApiAdminResetUserPasswordGetResponse
func (c *ClientWithResponses) AdminListPasswordRequestUsersApiAdminResetUserPasswordGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AdminListPasswordRequestUsersApiAdminResetUserPasswordGetResponse, error) {
	rsp, err := c.AdminListPasswordRequestUsersApiAdminResetUserPasswordGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminListPasswordRequestUsersApiAdminResetUserPasswordGetResponse(rsp)
}

// AdminResetUserPasswordByEmailApiAdminResetUserPasswordPostWithBodyWithResponse request with arbitrary body returning *AdminResetUserPasswordByEmailApiAdminResetUserPasswordPostResponse
func (c *ClientWithResponses) AdminResetUserPasswordByEmailApiAdminResetUserPasswordPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminResetUserPasswordByEmailApiAdminResetUserPasswordPostResponse, error) {
	rsp, err := c.AdminResetUserPasswordByEmailApiAdminResetUserPasswordPostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminResetUserPasswordByEmailApiAdminResetUserPasswordPostResponse(rsp)
}

func (c *ClientWithResponses) AdminResetUserPasswordByEmailApiAdminResetUserPasswordPostWithResponse(ctx context.Context, body AdminResetUserPasswordByEmailApiAdminResetUserPasswordPostJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminResetUserPasswordByEmailApiAdminResetUserPasswordPostResponse, error) {
	rsp, err := c.AdminResetUserPasswordByEmailApiAdminResetUserPasswordPost(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminResetUserPasswordByEmailApiAdminResetUserPasswordPostResponse(rsp)
}

// AdminListUnverifiedUsersApiAdminUsersUnverifiedGetWithResponse request returning *AdminListUnverifiedUsersApiAdminUsersUnverifiedGetResponse
func (c *ClientWithResponses) AdminListUnverifiedUsersApiAdminUsersUnverifiedGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AdminListUnverifiedUsersApiAdminUsersUnverifiedGetResponse, error) {
	rsp, err := c.AdminListUnverifiedUsersApiAdminUsersUnverifiedGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminListUnverifiedUsersApiAdminUsersUnverifiedGetResponse(rsp)
}

// AdminVerifyUsersByEmailApiAdminUsersUnverifiedPostWithBodyWithResponse request with arbitrary body returning *AdminVerifyUsersByEmailApiAdminUsersUnverifiedPostResponse
func (c *ClientWithResponses) AdminVerifyUsersByEmailApiAdminUsersUnverifiedPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminVerifyUsersByEmailApiAdminUsersUnverifiedPostResponse, error) {
	rsp, err := c.AdminVerifyUsersByEmailApiAdminUsersUnverifiedPostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminVerifyUsersByEmailApiAdminUsersUnverifiedPostResponse(rsp)
}

func (c *ClientWithResponses) AdminVerifyUsersByEmailApiAdminUsersUnverifiedPostWithResponse(ctx context.Context, body AdminVerifyUsersByEmailApiAdminUsersUnverifiedPostJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminVerifyUsersByEmailApiAdminUsersUnverifiedPostResponse, error) {
	rsp, err := c.AdminVerifyUsersByEmailApiAdminUsersUnverifiedPost(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminVerifyUsersByEmailApiAdminUsersUnverifiedPostResponse(rsp)
}

// AdminListUsersApiAdminUsersGetWithResponse request returning *AdminListUsersApiAdminUsersGetResponse
func (c *ClientWithResponses) AdminListUsersApiAdminUsersGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AdminListUsersApiAdminUsersGetResponse, error) {
	rsp, err := c.AdminListUsersApiAdminUsersGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminListUsersApiAdminUsersGetResponse(rsp)
}

// ProfilesUpdateOwnProfileApiProfilesMePutWithBodyWithResponse request with arbitrary body returning *ProfilesUpdateOwnProfileApiProfilesMePutResponse
func (c *ClientWithResponses) ProfilesUpdateOwnProfileApiProfilesMePutWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProfilesUpdateOwnProfileApiProfilesMePutResponse, error) {
	rsp, err := c.ProfilesUpdateOwnProfileApiProfilesMePutWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProfilesUpdateOwnProfileApiProfilesMePutResponse(rsp)
}

func (c *ClientWithResponses) ProfilesUpdateOwnProfileApiProfilesMePutWithResponse(ctx context.Context, body ProfilesUpdateOwnProfileApiProfilesMePutJSONRequestBody, reqEditors ...RequestEditorFn) (*ProfilesUpdateOwnProfileApiProfilesMePutResponse, error) {
	rsp, err := c.ProfilesUpdateOwnProfileApiProfilesMePut(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProfilesUpdateOwnProfileApiProfilesMePutResponse(rsp)
}

// ProfilesGetProfileByUsernameApiProfilesUsernameGetWithResponse request returning *ProfilesGetProfileByUsernameApiProfilesUsernameGetResponse
func (c *ClientWithResponses) ProfilesGetProfileByUsernameApiProfilesUsernameGetWithResponse(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*ProfilesGetProfileByUsernameApiProfilesUsernameGetResponse, error) {
	rsp, err := c.ProfilesGetProfileByUsernameApiProfilesUsernameGet(ctx, username, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProfilesGetProfileByUsernameApiProfilesUsernameGetResponse(rsp)
}

// UsersRegisterNewUserApiUsersPostWithBodyWithResponse request with arbitrary body returning *UsersRegisterNewUserApiUsersPostResponse
func (c *ClientWithResponses) UsersRegisterNewUserApiUsersPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersRegisterNewUserApiUsersPostResponse, error) {
	rsp, err := c.UsersRegisterNewUserApiUsersPostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersRegisterNewUserApiUsersPostResponse(rsp)
}

func (c *ClientWithResponses) UsersRegisterNewUserApiUsersPostWithResponse(ctx context.Context, body UsersRegisterNewUserApiUsersPostJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersRegisterNewUserApiUsersPostResponse, error) {
	rsp, err := c.UsersRegisterNewUserApiUsersPost(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersRegisterNewUserApiUsersPostResponse(rsp)
}

// UsersLoginEmailAndPasswordApiUsersLoginTokenPostWithBodyWithResponse request with arbitrary body returning *UsersLoginEmailAndPasswordApiUsersLoginTokenPostResponse
func (c *ClientWithResponses) UsersLoginEmailAndPasswordApiUsersLoginTokenPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersLoginEmailAndPasswordApiUsersLoginTokenPostResponse, error) {
	rsp, err := c.UsersLoginEmailAndPasswordApiUsersLoginTokenPostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersLoginEmailAndPasswordApiUsersLoginTokenPostResponse(rsp)
}

// UsersGetCurrentUserApiUsersMeGetWithResponse request returning *UsersGetCurrentUserApiUsersMeGetResponse
func (c *ClientWithResponses) UsersGetCurrentUserApiUsersMeGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*UsersGetCurrentUserApiUsersMeGetResponse, error) {
	rsp, err := c.UsersGetCurrentUserApiUsersMeGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersGetCurrentUserApiUsersMeGetResponse(rsp)
}

// UsersUpdateUserByIdApiUsersMePutWithBodyWithResponse request with arbitrary body returning *UsersUpdateUserByIdApiUsersMePutResponse
func (c *ClientWithResponses) UsersUpdateUserByIdApiUsersMePutWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersUpdateUserByIdApiUsersMePutResponse, error) {
	rsp, err := c.UsersUpdateUserByIdApiUsersMePutWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersUpdateUserByIdApiUsersMePutResponse(rsp)
}

func (c *ClientWithResponses) UsersUpdateUserByIdApiUsersMePutWithResponse(ctx context.Context, body UsersUpdateUserByIdApiUsersMePutJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersUpdateUserByIdApiUsersMePutResponse, error) {
	rsp, err := c.UsersUpdateUserByIdApiUsersMePut(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersUpdateUserByIdApiUsersMePutResponse(rsp)
}

// UsersRequestPasswordResetApiUsersRequestPasswordResetPostWithBodyWithResponse request with arbitrary body returning *UsersRequestPasswordResetApiUsersRequestPasswordResetPostResponse
func (c *ClientWithResponses) UsersRequestPasswordResetApiUsersRequestPasswordResetPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersRequestPasswordResetApiUsersRequestPasswordResetPostResponse, error) {
	rsp, err := c.UsersRequestPasswordResetApiUsersRequestPasswordResetPostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersRequestPasswordResetApiUsersRequestPasswordResetPostResponse(rsp)
}

func (c *ClientWithResponses) UsersRequestPasswordResetApiUsersRequestPasswordResetPostWithResponse(ctx context.Context, body UsersRequestPasswordResetApiUsersRequestPasswordResetPostJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersRequestPasswordResetApiUsersRequestPasswordResetPostResponse, error) {
	rsp, err := c.UsersRequestPasswordResetApiUsersRequestPasswordResetPost(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersRequestPasswordResetApiUsersRequestPasswordResetPostResponse(rsp)
}

// ParseAdminDeletePasswordResetRequestApiAdminDeletePasswordResetRequestIdDeleteResponse parses an HTTP response from a AdminDeletePasswordResetRequestApiAdminDeletePasswordResetRequestIdDeleteWithResponse call
func ParseAdminDeletePasswordResetRequestApiAdminDeletePasswordResetRequestIdDeleteResponse(rsp *http.Response) (*AdminDeletePasswordResetRequestApiAdminDeletePasswordResetRequestIdDeleteResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminDeletePasswordResetRequestApiAdminDeletePasswordResetRequestIdDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PasswordResetRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseAdminListPasswordRequestUsersApiAdminResetUserPasswordGetResponse parses an HTTP response from a AdminListPasswordRequestUsersApiAdminResetUserPasswordGetWithResponse call
func ParseAdminListPasswordRequestUsersApiAdminResetUserPasswordGetResponse(rsp *http.Response) (*AdminListPasswordRequestUsersApiAdminResetUserPasswordGetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminListPasswordRequestUsersApiAdminResetUserPasswordGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PasswordResetRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAdminResetUserPasswordByEmailApiAdminResetUserPasswordPostResponse parses an HTTP response from a AdminResetUserPasswordByEmailApiAdminResetUserPasswordPostWithResponse call
func ParseAdminResetUserPasswordByEmailApiAdminResetUserPasswordPostResponse(rsp *http.Response) (*AdminResetUserPasswordByEmailApiAdminResetUserPasswordPostResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminResetUserPasswordByEmailApiAdminResetUserPasswordPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseAdminListUnverifiedUsersApiAdminUsersUnverifiedGetResponse parses an HTTP response from a AdminListUnverifiedUsersApiAdminUsersUnverifiedGetWithResponse call
func ParseAdminListUnverifiedUsersApiAdminUsersUnverifiedGetResponse(rsp *http.Response) (*AdminListUnverifiedUsersApiAdminUsersUnverifiedGetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminListUnverifiedUsersApiAdminUsersUnverifiedGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []UserPublic
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAdminVerifyUsersByEmailApiAdminUsersUnverifiedPostResponse parses an HTTP response from a AdminVerifyUsersByEmailApiAdminUsersUnverifiedPostWithResponse call
func ParseAdminVerifyUsersByEmailApiAdminUsersUnverifiedPostResponse(rsp *http.Response) (*AdminVerifyUsersByEmailApiAdminUsersUnverifiedPostResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminVerifyUsersByEmailApiAdminUsersUnverifiedPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []UserPublic
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseAdminListUsersApiAdminUsersGetResponse parses an HTTP response from a AdminListUsersApiAdminUsersGetWithResponse call
func ParseAdminListUsersApiAdminUsersGetResponse(rsp *http.Response) (*AdminListUsersApiAdminUsersGetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminListUsersApiAdminUsersGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []UserPublic
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseProfilesUpdateOwnProfileApiProfilesMePutResponse parses an HTTP response from a ProfilesUpdateOwnProfileApiProfilesMePutWithResponse call
func ParseProfilesUpdateOwnProfileApiProfilesMePutResponse(rsp *http.Response) (*ProfilesUpdateOwnProfileApiProfilesMePutResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProfilesUpdateOwnProfileApiProfilesMePutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProfilePublic
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseProfilesGetProfileByUsernameApiProfilesUsernameGetResponse parses an HTTP response from a ProfilesGetProfileByUsernameApiProfilesUsernameGetWithResponse call
func ParseProfilesGetProfileByUsernameApiProfilesUsernameGetResponse(rsp *http.Response) (*ProfilesGetProfileByUsernameApiProfilesUsernameGetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProfilesGetProfileByUsernameApiProfilesUsernameGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProfilePublic
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseUsersRegisterNewUserApiUsersPostResponse parses an HTTP response from a UsersRegisterNewUserApiUsersPostWithResponse call
func ParseUsersRegisterNewUserApiUsersPostResponse(rsp *http.Response) (*UsersRegisterNewUserApiUsersPostResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersRegisterNewUserApiUsersPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest UserPublic
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseUsersLoginEmailAndPasswordApiUsersLoginTokenPostResponse parses an HTTP response from a UsersLoginEmailAndPasswordApiUsersLoginTokenPostWithResponse call
func ParseUsersLoginEmailAndPasswordApiUsersLoginTokenPostResponse(rsp *http.Response) (*UsersLoginEmailAndPasswordApiUsersLoginTokenPostResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersLoginEmailAndPasswordApiUsersLoginTokenPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccessToken
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseUsersGetCurrentUserApiUsersMeGetResponse parses an HTTP response from a UsersGetCurrentUserApiUsersMeGetWithResponse call
func ParseUsersGetCurrentUserApiUsersMeGetResponse(rsp *http.Response) (*UsersGetCurrentUserApiUsersMeGetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersGetCurrentUserApiUsersMeGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserPublic
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUsersUpdateUserByIdApiUsersMePutResponse parses an HTTP response from a UsersUpdateUserByIdApiUsersMePutWithResponse call
func ParseUsersUpdateUserByIdApiUsersMePutResponse(rsp *http.Response) (*UsersUpdateUserByIdApiUsersMePutResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersUpdateUserByIdApiUsersMePutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserPublic
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseUsersRequestPasswordResetApiUsersRequestPasswordResetPostResponse parses an HTTP response from a UsersRequestPasswordResetApiUsersRequestPasswordResetPostWithResponse call
func ParseUsersRequestPasswordResetApiUsersRequestPasswordResetPostResponse(rsp *http.Response) (*UsersRequestPasswordResetApiUsersRequestPasswordResetPostResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersRequestPasswordResetApiUsersRequestPasswordResetPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PasswordResetRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Admin:Delete-Password-Reset-Request
	// (DELETE /api/admin/delete-password-reset-request/{id}/)
	AdminDeletePasswordResetRequestApiAdminDeletePasswordResetRequestIdDelete(ctx echo.Context, id int) error
	// Admin:List-Password-Request-Users
	// (GET /api/admin/reset-user-password/)
	AdminListPasswordRequestUsersApiAdminResetUserPasswordGet(ctx echo.Context) error
	// Admin:Reset-User-Password-By-Email
	// (POST /api/admin/reset-user-password/)
	AdminResetUserPasswordByEmailApiAdminResetUserPasswordPost(ctx echo.Context) error
	// Admin:List-Unverified-Users
	// (GET /api/admin/users-unverified/)
	AdminListUnverifiedUsersApiAdminUsersUnverifiedGet(ctx echo.Context) error
	// Admin:Verify-Users-By-Email
	// (POST /api/admin/users-unverified/)
	AdminVerifyUsersByEmailApiAdminUsersUnverifiedPost(ctx echo.Context) error
	// Admin:List-Users
	// (GET /api/admin/users/)
	AdminListUsersApiAdminUsersGet(ctx echo.Context) error
	// Profiles:Update-Own-Profile
	// (PUT /api/profiles/me/)
	ProfilesUpdateOwnProfileApiProfilesMePut(ctx echo.Context) error
	// Profiles:Get-Profile-By-Username
	// (GET /api/profiles/{username}/)
	ProfilesGetProfileByUsernameApiProfilesUsernameGet(ctx echo.Context, username string) error
	// Users:Register-New-User
	// (POST /api/users/)
	UsersRegisterNewUserApiUsersPost(ctx echo.Context) error
	// Users:Login-Email-And-Password
	// (POST /api/users/login/token/)
	UsersLoginEmailAndPasswordApiUsersLoginTokenPost(ctx echo.Context) error
	// Users:Get-Current-User
	// (GET /api/users/me/)
	UsersGetCurrentUserApiUsersMeGet(ctx echo.Context) error
	// Users:Update-User-By-Id
	// (PUT /api/users/me/)
	UsersUpdateUserByIdApiUsersMePut(ctx echo.Context) error
	// Users:Request-Password-Reset
	// (POST /api/users/request-password-reset/)
	UsersRequestPasswordResetApiUsersRequestPasswordResetPost(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AdminDeletePasswordResetRequestApiAdminDeletePasswordResetRequestIdDelete converts echo context to params.
func (w *ServerInterfaceWrapper) AdminDeletePasswordResetRequestApiAdminDeletePasswordResetRequestIdDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(OAuth2PasswordBearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AdminDeletePasswordResetRequestApiAdminDeletePasswordResetRequestIdDelete(ctx, id)
	return err
}

// AdminListPasswordRequestUsersApiAdminResetUserPasswordGet converts echo context to params.
func (w *ServerInterfaceWrapper) AdminListPasswordRequestUsersApiAdminResetUserPasswordGet(ctx echo.Context) error {
	var err error

	ctx.Set(OAuth2PasswordBearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AdminListPasswordRequestUsersApiAdminResetUserPasswordGet(ctx)
	return err
}

// AdminResetUserPasswordByEmailApiAdminResetUserPasswordPost converts echo context to params.
func (w *ServerInterfaceWrapper) AdminResetUserPasswordByEmailApiAdminResetUserPasswordPost(ctx echo.Context) error {
	var err error

	ctx.Set(OAuth2PasswordBearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AdminResetUserPasswordByEmailApiAdminResetUserPasswordPost(ctx)
	return err
}

// AdminListUnverifiedUsersApiAdminUsersUnverifiedGet converts echo context to params.
func (w *ServerInterfaceWrapper) AdminListUnverifiedUsersApiAdminUsersUnverifiedGet(ctx echo.Context) error {
	var err error

	ctx.Set(OAuth2PasswordBearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AdminListUnverifiedUsersApiAdminUsersUnverifiedGet(ctx)
	return err
}

// AdminVerifyUsersByEmailApiAdminUsersUnverifiedPost converts echo context to params.
func (w *ServerInterfaceWrapper) AdminVerifyUsersByEmailApiAdminUsersUnverifiedPost(ctx echo.Context) error {
	var err error

	ctx.Set(OAuth2PasswordBearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AdminVerifyUsersByEmailApiAdminUsersUnverifiedPost(ctx)
	return err
}

// AdminListUsersApiAdminUsersGet converts echo context to params.
func (w *ServerInterfaceWrapper) AdminListUsersApiAdminUsersGet(ctx echo.Context) error {
	var err error

	ctx.Set(OAuth2PasswordBearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AdminListUsersApiAdminUsersGet(ctx)
	return err
}

// ProfilesUpdateOwnProfileApiProfilesMePut converts echo context to params.
func (w *ServerInterfaceWrapper) ProfilesUpdateOwnProfileApiProfilesMePut(ctx echo.Context) error {
	var err error

	ctx.Set(OAuth2PasswordBearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProfilesUpdateOwnProfileApiProfilesMePut(ctx)
	return err
}

// ProfilesGetProfileByUsernameApiProfilesUsernameGet converts echo context to params.
func (w *ServerInterfaceWrapper) ProfilesGetProfileByUsernameApiProfilesUsernameGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "username" -------------
	var username string

	err = runtime.BindStyledParameterWithLocation("simple", false, "username", runtime.ParamLocationPath, ctx.Param("username"), &username)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter username: %s", err))
	}

	ctx.Set(OAuth2PasswordBearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProfilesGetProfileByUsernameApiProfilesUsernameGet(ctx, username)
	return err
}

// UsersRegisterNewUserApiUsersPost converts echo context to params.
func (w *ServerInterfaceWrapper) UsersRegisterNewUserApiUsersPost(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UsersRegisterNewUserApiUsersPost(ctx)
	return err
}

// UsersLoginEmailAndPasswordApiUsersLoginTokenPost converts echo context to params.
func (w *ServerInterfaceWrapper) UsersLoginEmailAndPasswordApiUsersLoginTokenPost(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UsersLoginEmailAndPasswordApiUsersLoginTokenPost(ctx)
	return err
}

// UsersGetCurrentUserApiUsersMeGet converts echo context to params.
func (w *ServerInterfaceWrapper) UsersGetCurrentUserApiUsersMeGet(ctx echo.Context) error {
	var err error

	ctx.Set(OAuth2PasswordBearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UsersGetCurrentUserApiUsersMeGet(ctx)
	return err
}

// UsersUpdateUserByIdApiUsersMePut converts echo context to params.
func (w *ServerInterfaceWrapper) UsersUpdateUserByIdApiUsersMePut(ctx echo.Context) error {
	var err error

	ctx.Set(OAuth2PasswordBearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UsersUpdateUserByIdApiUsersMePut(ctx)
	return err
}

// UsersRequestPasswordResetApiUsersRequestPasswordResetPost converts echo context to params.
func (w *ServerInterfaceWrapper) UsersRequestPasswordResetApiUsersRequestPasswordResetPost(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UsersRequestPasswordResetApiUsersRequestPasswordResetPost(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/api/admin/delete-password-reset-request/:id/", wrapper.AdminDeletePasswordResetRequestApiAdminDeletePasswordResetRequestIdDelete)
	router.GET(baseURL+"/api/admin/reset-user-password/", wrapper.AdminListPasswordRequestUsersApiAdminResetUserPasswordGet)
	router.POST(baseURL+"/api/admin/reset-user-password/", wrapper.AdminResetUserPasswordByEmailApiAdminResetUserPasswordPost)
	router.GET(baseURL+"/api/admin/users-unverified/", wrapper.AdminListUnverifiedUsersApiAdminUsersUnverifiedGet)
	router.POST(baseURL+"/api/admin/users-unverified/", wrapper.AdminVerifyUsersByEmailApiAdminUsersUnverifiedPost)
	router.GET(baseURL+"/api/admin/users/", wrapper.AdminListUsersApiAdminUsersGet)
	router.PUT(baseURL+"/api/profiles/me/", wrapper.ProfilesUpdateOwnProfileApiProfilesMePut)
	router.GET(baseURL+"/api/profiles/:username/", wrapper.ProfilesGetProfileByUsernameApiProfilesUsernameGet)
	router.POST(baseURL+"/api/users/", wrapper.UsersRegisterNewUserApiUsersPost)
	router.POST(baseURL+"/api/users/login/token/", wrapper.UsersLoginEmailAndPasswordApiUsersLoginTokenPost)
	router.GET(baseURL+"/api/users/me/", wrapper.UsersGetCurrentUserApiUsersMeGet)
	router.PUT(baseURL+"/api/users/me/", wrapper.UsersUpdateUserByIdApiUsersMePut)
	router.POST(baseURL+"/api/users/request-password-reset/", wrapper.UsersRequestPasswordResetApiUsersRequestPasswordResetPost)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xbbXPbuBH+Kxj2ZvKhpOU47bTVNzlJU8/kxZPE12lzLg2RKwl3JMADQCu8jP57BwuC",
	"BClSkl8vafopFrgAF7vPPthdMF+CROSF4MC1CqZfApWsIKf45yxJQKmP4hfg5mcKKpGs0EzwYBpcXVF8",
	"HGvz/OpqSmiWibUiCyHJIoPPbM4ypiuiBclFyhYVEaUktNQr4Jol1KxDVKU05EdBGBRSFCA1A3y1v7b5",
	"rZnOIJjWKhGrUxjoqjCjSkvGl8EmDHBCbIfbWShOPprRrTmbMJDwa8kkpMH0U/fFnfUuw54WPSXE/GdI",
	"tFHiVKRVTNOc8ViCAh2XCmRcUKXWQqbxvIohpyyLacF2iMWFUNrsomsZnGr+WAiZUx1M65FWu5fu986N",
	"2lnepu5T691GuQbJFhVOVEPr2gclRzkGo6bAN+Nk/Mk05PjHNirqLV4okOSlndCoSKWk1ZZ5/LWHjXTL",
	"XYyZppBiwTJQcVmkVEMs1tyN4aLN8xziuCgHzOGk7QJm5AcJi2Aa/GHShvikju/JuZW+sML97ffW6lvg",
	"xsqO7doaKRNLxp0Bedqiyazli9hwHIFDkjHgOmapH/rPcZCcpUNsUc9QkEjQA7M+2AcDM5eSct3wTEG1",
	"BmlY0WnuheMrIzpCPmE7wXv7ubdIX14lwr4zhQUtMxP/3rs+4NOBacaInOYdVrxwY/uoomwFG3X7iLiD",
	"I3djQ8KSKQ0y5rC2XNOuNQIEJ7kvBIwBnksYwn+zxPA+9yu1b1O/lqB0ax9Lpe0iIwIjG/akcNre2K/l",
	"35tF39s5I4bYWnrMIHfZ0G5j1RyDZp5XMfPRNEqGKH0YExoYjNCgv8rwxg9RbmB7//j48fxHmrEU06CX",
	"Ugq5vYcUdH3WN0fbrn301/MOvhd2pYEzz0kMKTSg9xBytnNDY1FFEspJ7XZCiXM8QcebrJBygiclU1pS",
	"LeR2FpggJtOY6k7CYyweaWaZyzG2FSWzQbq+ddIUBt3jxD9HGNewBLRzDkrRJSItZ/w18KVeBdOTdvk3",
	"tcAQNSOCDtqkRenwJnvIZUZRt0mnngfhQUce6PCaKh7M7Xfw1u0dMZgeH2y62iRDBrSp0Hk5z1iybbOP",
	"gsyBlApSMq9MCWWKJcgU0SuqyYpegzHY2QtSSJZTWZFfoCKJyMqcbxtuzoQP1lMmBrOeryCqFmWWxf2E",
	"5O9llpG3gxnJgXHI8tr5jUalZMaL9HODheO/Pgt9cDxt1T3LR2K0WAkOMS/zuc0qGiiYcfLWjj9cbNv8",
	"rZfZYjEzYoc7pXtIHe6FPu47SB6H+kVz6nahPssysSZ4NBoesLYhlFdESMIFWTDIUhUSqkgm+NL8y/QT",
	"RbjQxKlzO8TfAm1fFZA2W06obTzgBC+p3fIAhmNIHDpCQnnaMjSVQBwOsIvjslxmnEE4WOfdJ1371Y9n",
	"2qfHxx3L/iU8qDbyUe+t9ufuYs9Cr177zyca/TaL/n0c/S2OLv/4QxDePF7cbr3ar9Hksrve+DFhno6d",
	"EacVoUkChUZHcCLwAc2I36wiVGvJ5qWGkKwBT2Eu1kSCLiUnegU/caMVoRhba6ZXZpBJUs9WRAmB/+oV",
	"VE+uoXE/pEc/8X8CoZkS9kTSKyC0be9RrWmyIhThQeraf29Lb1cq6zfYvpITyxa1rpnTqcAXNFPQW4L8",
	"6CSbteZCZED54YeZimmi2XW33Ney9N51psjMygy+RsWqLEC6YnhM4zNFPjRyQws5nx7WU6pxfN/n310O",
	"tF4cjp9hXjE4kt8amsRWN6TeMWZjCboEaw42jxXujTZF1rZWdpOdx5zvspTsYs+bdqIekW19ofGTb289",
	"nYnksD7xa2GvJ7YK5jDI1dI30I66rn8JgUoddglhFLWvqiU9+O4t0jdhoCApJdPVBxOXdu/vZqVenTh/",
	"ngKVlhIWmVh3ekj2DkgUOM3dqFzILJgGE1qwCeZvE+ziTfDZxLqoVoKa1wQbM8T4opOcvfkXmZ2fB2Fw",
	"DVLZiHp6dHx0jIgugNOCBdPg2dHx0QmepnqFiuFbsWKcpJCBhsipGmFNGdXF5uQLSzcTG7VGbDt+X+D4",
	"dlHqqlU8FFk6JVdXLL26MvWVgQ8a+yw1GazRwq4yVATOCrZH4iy1z3B/kuagQapg+ulLwGz3WK+CMLBR",
	"ZfPwFhaW+C3V1vUty8u8m3cOnSSbS7OMKgRXFgsnx8fYXRFcA0dmpkWR1Vdyk5+V4O1F4MHdp8GGghdT",
	"72sNCJqI1L5wswhOI/U8MivYQXLkLCWENDbtdbc2YQ8AH0rMKxZlRpw6RsU/nZzcyB67zDDURxvQpBUh",
	"TqYNWwTEcMB+ujTeVGWeU1k5RE6tASInHKGRIq+rQ5cKLzeNdHBp3uVFlY0iE9dNZGEYLWGgtffe5pOU",
	"ZExpIhaunmu6FXUwQboVZyPx9Jop3YIHJ+NB66IJN4OHdi30Cq9kvjpEm334OLUItTlDi2eLX6zdG1ny",
	"yr9kuhl67wIbo7EPGtQ4Qo0HQBMG7vKhjwizo8bVpnA0NT3WAvPKpkQjrt9y7WmFOc+o68/tbUGNsVOR",
	"VvcWuPd5/b3pHuiGuTd3ROwI6IbgdFrZO+59qDvvXL00qch3w5qWJY1R2iA4raIm695Jmkh7UXu7P86Y",
	"yAs0y0grbElzBx9eNKIdKsQf7bPHIkKvYtpDf61uW8Rnf3sCvyvrtXrcmO+wsK+87kh9BF4zincbZiPm",
	"YLQfj4w42S6Cr+5xXs/Hj8N4t/yW5QF47v4AWfvJ4m6AE7cB2SXE7y6LtAaz8XBDIjyE/dDcDFuRJKWa",
	"zqmCXRS4RXxfId0NctzvS2wjbOac5r7MmuSATqs/nug6oe7jKdtrebfm9cCsYO7RGzgvH5SYbvyJ2QOQ",
	"0Q16nd8DTTjfTy0uondrHp033X6HOOeYIdB9cU3Djc8Yw+B7Bbr+87Ry3UEPgG7IBtv+bor3EdvOnso9",
	"Ni4v/w+/B4HfK9AOd+ac8j0wjsH2nHJpXRd2SJzv66TuLazN71nBcPihk7BDPyo8iOKe3ptu/kH47QGs",
	"wQ26cOpcG72FNULGgwvaeAsrnR73bty8NqI2jeepw7FDDz7Eu8wb4ehztF6vo4WQeVTKDHgiUkhvBaxb",
	"fZX7yMdp58b3mwcbutwm0NGMp5F/j7YTc3VWNngwuiT4eSklcO0T1Bu4h+T4nqngdiRv7WcYvt7mWKyG",
	"LnXt3dE217FYcTxR7nuE7VLDVtoob/48rc7S1p4PnN0e/vHwI8fht835t8VbndBiL/C0is72B2qNjN5d",
	"ZOec6H39xiti/79JSBhPsjJlfElKTku9EpL9Bmm459PZFdWEA6TKfj9LaFFIcU2zEWTX/fzOLYbD99Cz",
	"x0py7vIfBR67xhu8AfofSIUsdrv3hUOQ32z+GwAA//9JLRkvHzoAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
