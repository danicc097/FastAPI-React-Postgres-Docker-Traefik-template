// Package Schema provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package Schema

import (
	"context"
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Admin:Delete-Password-Reset-Request
	// (DELETE /api/admin/delete-password-reset-request/{id}/)
	AdminDeletePasswordResetRequestApiAdminDeletePasswordResetRequestIdDelete(w http.ResponseWriter, r *http.Request, id int)
	// Admin:List-Password-Request-Users
	// (GET /api/admin/reset-user-password/)
	AdminListPasswordRequestUsersApiAdminResetUserPasswordGet(w http.ResponseWriter, r *http.Request)
	// Admin:Reset-User-Password-By-Email
	// (POST /api/admin/reset-user-password/)
	AdminResetUserPasswordByEmailApiAdminResetUserPasswordPost(w http.ResponseWriter, r *http.Request)
	// Admin:List-Unverified-Users
	// (GET /api/admin/users-unverified/)
	AdminListUnverifiedUsersApiAdminUsersUnverifiedGet(w http.ResponseWriter, r *http.Request)
	// Admin:Verify-Users-By-Email
	// (POST /api/admin/users-unverified/)
	AdminVerifyUsersByEmailApiAdminUsersUnverifiedPost(w http.ResponseWriter, r *http.Request)
	// Admin:List-Users
	// (GET /api/admin/users/)
	AdminListUsersApiAdminUsersGet(w http.ResponseWriter, r *http.Request)
	// Profiles:Update-Own-Profile
	// (PUT /api/profiles/me/)
	ProfilesUpdateOwnProfileApiProfilesMePut(w http.ResponseWriter, r *http.Request)
	// Profiles:Get-Profile-By-Username
	// (GET /api/profiles/{username}/)
	ProfilesGetProfileByUsernameApiProfilesUsernameGet(w http.ResponseWriter, r *http.Request, username string)
	// Users:Register-New-User
	// (POST /api/users/)
	UsersRegisterNewUserApiUsersPost(w http.ResponseWriter, r *http.Request)
	// Users:Login-Email-And-Password
	// (POST /api/users/login/token/)
	UsersLoginEmailAndPasswordApiUsersLoginTokenPost(w http.ResponseWriter, r *http.Request)
	// Users:Get-Current-User
	// (GET /api/users/me/)
	UsersGetCurrentUserApiUsersMeGet(w http.ResponseWriter, r *http.Request)
	// Users:Update-User-By-Id
	// (PUT /api/users/me/)
	UsersUpdateUserByIdApiUsersMePut(w http.ResponseWriter, r *http.Request)
	// Users:Request-Password-Reset
	// (POST /api/users/request-password-reset/)
	UsersRequestPasswordResetApiUsersRequestPasswordResetPost(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// AdminDeletePasswordResetRequestApiAdminDeletePasswordResetRequestIdDelete operation middleware
func (siw *ServerInterfaceWrapper) AdminDeletePasswordResetRequestApiAdminDeletePasswordResetRequestIdDelete(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	ctx = context.WithValue(ctx, OAuth2PasswordBearerScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminDeletePasswordResetRequestApiAdminDeletePasswordResetRequestIdDelete(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AdminListPasswordRequestUsersApiAdminResetUserPasswordGet operation middleware
func (siw *ServerInterfaceWrapper) AdminListPasswordRequestUsersApiAdminResetUserPasswordGet(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, OAuth2PasswordBearerScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminListPasswordRequestUsersApiAdminResetUserPasswordGet(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AdminResetUserPasswordByEmailApiAdminResetUserPasswordPost operation middleware
func (siw *ServerInterfaceWrapper) AdminResetUserPasswordByEmailApiAdminResetUserPasswordPost(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, OAuth2PasswordBearerScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminResetUserPasswordByEmailApiAdminResetUserPasswordPost(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AdminListUnverifiedUsersApiAdminUsersUnverifiedGet operation middleware
func (siw *ServerInterfaceWrapper) AdminListUnverifiedUsersApiAdminUsersUnverifiedGet(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, OAuth2PasswordBearerScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminListUnverifiedUsersApiAdminUsersUnverifiedGet(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AdminVerifyUsersByEmailApiAdminUsersUnverifiedPost operation middleware
func (siw *ServerInterfaceWrapper) AdminVerifyUsersByEmailApiAdminUsersUnverifiedPost(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, OAuth2PasswordBearerScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminVerifyUsersByEmailApiAdminUsersUnverifiedPost(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AdminListUsersApiAdminUsersGet operation middleware
func (siw *ServerInterfaceWrapper) AdminListUsersApiAdminUsersGet(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, OAuth2PasswordBearerScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminListUsersApiAdminUsersGet(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// ProfilesUpdateOwnProfileApiProfilesMePut operation middleware
func (siw *ServerInterfaceWrapper) ProfilesUpdateOwnProfileApiProfilesMePut(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, OAuth2PasswordBearerScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ProfilesUpdateOwnProfileApiProfilesMePut(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// ProfilesGetProfileByUsernameApiProfilesUsernameGet operation middleware
func (siw *ServerInterfaceWrapper) ProfilesGetProfileByUsernameApiProfilesUsernameGet(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "username" -------------
	var username string

	err = runtime.BindStyledParameter("simple", false, "username", chi.URLParam(r, "username"), &username)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter username: %s", err), http.StatusBadRequest)
		return
	}

	ctx = context.WithValue(ctx, OAuth2PasswordBearerScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ProfilesGetProfileByUsernameApiProfilesUsernameGet(w, r, username)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// UsersRegisterNewUserApiUsersPost operation middleware
func (siw *ServerInterfaceWrapper) UsersRegisterNewUserApiUsersPost(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UsersRegisterNewUserApiUsersPost(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// UsersLoginEmailAndPasswordApiUsersLoginTokenPost operation middleware
func (siw *ServerInterfaceWrapper) UsersLoginEmailAndPasswordApiUsersLoginTokenPost(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UsersLoginEmailAndPasswordApiUsersLoginTokenPost(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// UsersGetCurrentUserApiUsersMeGet operation middleware
func (siw *ServerInterfaceWrapper) UsersGetCurrentUserApiUsersMeGet(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, OAuth2PasswordBearerScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UsersGetCurrentUserApiUsersMeGet(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// UsersUpdateUserByIdApiUsersMePut operation middleware
func (siw *ServerInterfaceWrapper) UsersUpdateUserByIdApiUsersMePut(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, OAuth2PasswordBearerScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UsersUpdateUserByIdApiUsersMePut(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// UsersRequestPasswordResetApiUsersRequestPasswordResetPost operation middleware
func (siw *ServerInterfaceWrapper) UsersRequestPasswordResetApiUsersRequestPasswordResetPost(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UsersRequestPasswordResetApiUsersRequestPasswordResetPost(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL     string
	BaseRouter  chi.Router
	Middlewares []MiddlewareFunc
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/admin/delete-password-reset-request/{id}/", wrapper.AdminDeletePasswordResetRequestApiAdminDeletePasswordResetRequestIdDelete)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/admin/reset-user-password/", wrapper.AdminListPasswordRequestUsersApiAdminResetUserPasswordGet)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/admin/reset-user-password/", wrapper.AdminResetUserPasswordByEmailApiAdminResetUserPasswordPost)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/admin/users-unverified/", wrapper.AdminListUnverifiedUsersApiAdminUsersUnverifiedGet)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/admin/users-unverified/", wrapper.AdminVerifyUsersByEmailApiAdminUsersUnverifiedPost)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/admin/users/", wrapper.AdminListUsersApiAdminUsersGet)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/profiles/me/", wrapper.ProfilesUpdateOwnProfileApiProfilesMePut)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/profiles/{username}/", wrapper.ProfilesGetProfileByUsernameApiProfilesUsernameGet)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/users/", wrapper.UsersRegisterNewUserApiUsersPost)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/users/login/token/", wrapper.UsersLoginEmailAndPasswordApiUsersLoginTokenPost)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/users/me/", wrapper.UsersGetCurrentUserApiUsersMeGet)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/users/me/", wrapper.UsersUpdateUserByIdApiUsersMePut)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/users/request-password-reset/", wrapper.UsersRequestPasswordResetApiUsersRequestPasswordResetPost)
	})

	return r
}
