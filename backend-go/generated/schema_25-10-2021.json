{
  "components": {
    "schemas": {
      "AccessToken": {
        "description": "``access_token``: allows for flexibility to modify our authentication system.",
        "properties": {
          "access_token": {
            "title": "Access Token",
            "type": "string"
          },
          "token_type": {
            "title": "Token Type",
            "type": "string"
          }
        },
        "required": ["access_token", "token_type"],
        "title": "AccessToken",
        "type": "object"
      },
      "Body_admin_reset_user_password_by_email_api_admin_reset_user_password__post": {
        "properties": {
          "email": {
            "format": "email",
            "title": "Email",
            "type": "string"
          }
        },
        "required": ["email"],
        "title": "Body_admin_reset_user_password_by_email_api_admin_reset_user_password__post",
        "type": "object"
      },
      "Body_admin_verify_users_by_email_api_admin_users_unverified__post": {
        "properties": {
          "user_emails": {
            "items": {
              "type": "string"
            },
            "title": "User Emails",
            "type": "array"
          }
        },
        "required": ["user_emails"],
        "title": "Body_admin_verify_users_by_email_api_admin_users_unverified__post",
        "type": "object"
      },
      "Body_profiles_update_own_profile_api_profiles_me__put": {
        "properties": {
          "profile_update": {
            "$ref": "#/components/schemas/ProfileUpdate"
          }
        },
        "required": ["profile_update"],
        "title": "Body_profiles_update_own_profile_api_profiles_me__put",
        "type": "object"
      },
      "Body_users_login_email_and_password_api_users_login_token__post": {
        "properties": {
          "client_id": {
            "title": "Client Id",
            "type": "string"
          },
          "client_secret": {
            "title": "Client Secret",
            "type": "string"
          },
          "grant_type": {
            "pattern": "password",
            "title": "Grant Type",
            "type": "string"
          },
          "password": {
            "title": "Password",
            "type": "string"
          },
          "scope": {
            "default": "",
            "title": "Scope",
            "type": "string"
          },
          "username": {
            "title": "Username",
            "type": "string"
          }
        },
        "required": ["username", "password"],
        "title": "Body_users_login_email_and_password_api_users_login_token__post",
        "type": "object"
      },
      "Body_users_register_new_user_api_users__post": {
        "properties": {
          "new_user": {
            "$ref": "#/components/schemas/UserCreate"
          }
        },
        "required": ["new_user"],
        "title": "Body_users_register_new_user_api_users__post",
        "type": "object"
      },
      "Body_users_request_password_reset_api_users_request_password_reset__post": {
        "properties": {
          "password_request": {
            "$ref": "#/components/schemas/PasswordResetRequestCreate"
          }
        },
        "required": ["password_request"],
        "title": "Body_users_request_password_reset_api_users_request_password_reset__post",
        "type": "object"
      },
      "Body_users_update_user_by_id_api_users_me__put": {
        "properties": {
          "user_update": {
            "$ref": "#/components/schemas/UserUpdate"
          }
        },
        "required": ["user_update"],
        "title": "Body_users_update_user_by_id_api_users_me__put",
        "type": "object"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "title": "Detail",
            "type": "array"
          }
        },
        "title": "HTTPValidationError",
        "type": "object"
      },
      "PasswordResetRequest": {
        "description": "Users can request a password reset to an administrator.",
        "properties": {
          "created_at": {
            "format": "date-time",
            "title": "Created At",
            "type": "string"
          },
          "email": {
            "format": "email",
            "title": "Email",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "type": "integer"
          },
          "message": {
            "minLength": 2,
            "title": "Message",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "title": "Updated At",
            "type": "string"
          }
        },
        "required": ["id", "email", "message"],
        "title": "PasswordResetRequest",
        "type": "object"
      },
      "PasswordResetRequestCreate": {
        "description": "Users can request a password reset to an administrator.",
        "properties": {
          "email": {
            "format": "email",
            "title": "Email",
            "type": "string"
          },
          "message": {
            "minLength": 2,
            "title": "Message",
            "type": "string"
          }
        },
        "required": ["email", "message"],
        "title": "PasswordResetRequestCreate",
        "type": "object"
      },
      "ProfilePublic": {
        "description": "To be used by all models that have an ID primary key column.",
        "properties": {
          "bio": {
            "title": "Bio",
            "type": "string"
          },
          "created_at": {
            "format": "date-time",
            "title": "Created At",
            "type": "string"
          },
          "email": {
            "format": "email",
            "title": "Email",
            "type": "string"
          },
          "full_name": {
            "title": "Full Name",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "type": "integer"
          },
          "image": {
            "format": "uri",
            "maxLength": 2083,
            "minLength": 1,
            "title": "Image",
            "type": "string"
          },
          "phone_number": {
            "title": "Phone Number",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "title": "Updated At",
            "type": "string"
          },
          "user_id": {
            "title": "User Id",
            "type": "integer"
          },
          "username": {
            "title": "Username",
            "type": "string"
          }
        },
        "required": ["id", "user_id"],
        "title": "ProfilePublic",
        "type": "object"
      },
      "ProfileUpdate": {
        "description": "Allow users to update any or no fields, as long as it's not user_id",
        "properties": {
          "bio": {
            "title": "Bio",
            "type": "string"
          },
          "full_name": {
            "title": "Full Name",
            "type": "string"
          },
          "image": {
            "format": "uri",
            "maxLength": 2083,
            "minLength": 1,
            "title": "Image",
            "type": "string"
          },
          "phone_number": {
            "title": "Phone Number",
            "type": "string"
          }
        },
        "title": "ProfileUpdate",
        "type": "object"
      },
      "UserCreate": {
        "description": "Email, username, and password are required for registering a new user",
        "properties": {
          "email": {
            "format": "email",
            "title": "Email",
            "type": "string"
          },
          "password": {
            "maxLength": 100,
            "minLength": 7,
            "title": "Password",
            "type": "string"
          },
          "username": {
            "maxLength": 50,
            "minLength": 3,
            "pattern": "^[a-zA-Z0-9_-]+$",
            "title": "Username",
            "type": "string"
          }
        },
        "required": ["email", "password", "username"],
        "title": "UserCreate",
        "type": "object"
      },
      "UserPublic": {
        "description": "By accepting an optional access_token attribute, we can now return the\nuser along with their token as soon as they've registered.\nWe also have the ability to attach a user profile",
        "properties": {
          "access_token": {
            "$ref": "#/components/schemas/AccessToken"
          },
          "created_at": {
            "format": "date-time",
            "title": "Created At",
            "type": "string"
          },
          "email": {
            "format": "email",
            "title": "Email",
            "type": "string"
          },
          "email_verified": {
            "default": false,
            "title": "Email Verified",
            "type": "boolean"
          },
          "id": {
            "title": "Id",
            "type": "integer"
          },
          "is_active": {
            "default": true,
            "title": "Is Active",
            "type": "boolean"
          },
          "is_superuser": {
            "default": false,
            "title": "Is Superuser",
            "type": "boolean"
          },
          "profile": {
            "$ref": "#/components/schemas/ProfilePublic"
          },
          "updated_at": {
            "format": "date-time",
            "title": "Updated At",
            "type": "string"
          },
          "username": {
            "title": "Username",
            "type": "string"
          }
        },
        "required": ["id"],
        "title": "UserPublic",
        "type": "object"
      },
      "UserUpdate": {
        "description": "Users are allowed to update their email, username or password",
        "properties": {
          "email": {
            "format": "email",
            "title": "Email",
            "type": "string"
          },
          "old_password": {
            "maxLength": 50,
            "minLength": 7,
            "title": "Old Password",
            "type": "string"
          },
          "password": {
            "title": "Password",
            "type": "string"
          },
          "username": {
            "maxLength": 50,
            "minLength": 3,
            "pattern": "^[a-zA-Z0-9_-]+$",
            "title": "Username",
            "type": "string"
          }
        },
        "title": "UserUpdate",
        "type": "object"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "type": "string"
            },
            "title": "Location",
            "type": "array"
          },
          "msg": {
            "title": "Message",
            "type": "string"
          },
          "type": {
            "title": "Error Type",
            "type": "string"
          }
        },
        "required": ["loc", "msg", "type"],
        "title": "ValidationError",
        "type": "object"
      }
    },
    "securitySchemes": {
      "OAuth2PasswordBearer": {
        "flows": {
          "password": {
            "scopes": {},
            "tokenUrl": "/api/users/login/token/"
          }
        },
        "type": "oauth2"
      }
    }
  },
  "info": {
    "title": "MY APP",
    "version": "1.0.0"
  },
  "openapi": "3.0.2",
  "paths": {
    "/api/admin/delete-password-reset-request/{id}/": {
      "delete": {
        "description": "Delete a password reset request with id: ``id``.",
        "operationId": "admin_delete_password_reset_request_api_admin_delete_password_reset_request__id___delete",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "minimum": 1,
              "title": "Id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/PasswordResetRequest"
                  },
                  "title": "Response Admin Delete Password Reset Request Api Admin Delete Password Reset Request  Id   Delete",
                  "type": "array"
                }
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "summary": "Admin:Delete-Password-Reset-Request",
        "tags": ["admin"]
      }
    },
    "/api/admin/reset-user-password/": {
      "get": {
        "description": "Return a list of users that have requested a password reset.",
        "operationId": "admin_list_password_request_users_api_admin_reset_user_password__get",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/PasswordResetRequest"
                  },
                  "title": "Response Admin List Password Request Users Api Admin Reset User Password  Get",
                  "type": "array"
                }
              }
            },
            "description": "Successful Response"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "summary": "Admin:List-Password-Request-Users",
        "tags": ["admin"]
      },
      "post": {
        "description": "Reset password for any user by email.",
        "operationId": "admin_reset_user_password_by_email_api_admin_reset_user_password__post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_admin_reset_user_password_by_email_api_admin_reset_user_password__post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Admin Reset User Password By Email Api Admin Reset User Password  Post",
                  "type": "string"
                }
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "summary": "Admin:Reset-User-Password-By-Email",
        "tags": ["admin"]
      }
    },
    "/api/admin/users-unverified/": {
      "get": {
        "description": "List all unverified users.",
        "operationId": "admin_list_unverified_users_api_admin_users_unverified__get",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/UserPublic"
                  },
                  "title": "Response Admin List Unverified Users Api Admin Users Unverified  Get",
                  "type": "array"
                }
              }
            },
            "description": "Successful Response"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "summary": "Admin:List-Unverified-Users",
        "tags": ["admin"]
      },
      "post": {
        "description": "Verify registered users via an array of emails.",
        "operationId": "admin_verify_users_by_email_api_admin_users_unverified__post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_admin_verify_users_by_email_api_admin_users_unverified__post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/UserPublic"
                  },
                  "title": "Response Admin Verify Users By Email Api Admin Users Unverified  Post",
                  "type": "array"
                }
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "summary": "Admin:Verify-Users-By-Email",
        "tags": ["admin"]
      }
    },
    "/api/admin/users/": {
      "get": {
        "description": "List all users in the database.",
        "operationId": "admin_list_users_api_admin_users__get",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/UserPublic"
                  },
                  "title": "Response Admin List Users Api Admin Users  Get",
                  "type": "array"
                }
              }
            },
            "description": "Successful Response"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "summary": "Admin:List-Users",
        "tags": ["admin"]
      }
    },
    "/api/profiles/me/": {
      "put": {
        "operationId": "profiles_update_own_profile_api_profiles_me__put",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_profiles_update_own_profile_api_profiles_me__put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProfilePublic"
                }
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "summary": "Profiles:Update-Own-Profile",
        "tags": ["profiles"]
      }
    },
    "/api/profiles/{username}/": {
      "get": {
        "operationId": "profiles_get_profile_by_username_api_profiles__username___get",
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "required": true,
            "schema": {
              "minLength": 3,
              "pattern": "^[a-zA-Z0-9_-]+$",
              "title": "Username",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProfilePublic"
                }
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "summary": "Profiles:Get-Profile-By-Username",
        "tags": ["profiles"]
      }
    },
    "/api/users/": {
      "post": {
        "operationId": "users_register_new_user_api_users__post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_users_register_new_user_api_users__post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPublic"
                }
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "summary": "Users:Register-New-User",
        "tags": ["users"]
      }
    },
    "/api/users/login/token/": {
      "post": {
        "operationId": "users_login_email_and_password_api_users_login_token__post",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Body_users_login_email_and_password_api_users_login_token__post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessToken"
                }
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "summary": "Users:Login-Email-And-Password",
        "tags": ["users"]
      }
    },
    "/api/users/me/": {
      "get": {
        "operationId": "users_get_current_user_api_users_me__get",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPublic"
                }
              }
            },
            "description": "Successful Response"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "summary": "Users:Get-Current-User",
        "tags": ["users"]
      },
      "put": {
        "description": "Update the user's profile.",
        "operationId": "users_update_user_by_id_api_users_me__put",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_users_update_user_by_id_api_users_me__put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPublic"
                }
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "summary": "Users:Update-User-By-Id",
        "tags": ["users"]
      }
    },
    "/api/users/request-password-reset/": {
      "post": {
        "description": "Any client, including unauthorized, can request a password reset that needs admin approval.",
        "operationId": "users_request_password_reset_api_users_request_password_reset__post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_users_request_password_reset_api_users_request_password_reset__post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PasswordResetRequest"
                }
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "summary": "Users:Request-Password-Reset",
        "tags": ["users"]
      }
    }
  }
}
