#!/bin/bash

#
# Backup or restore a database in the given environment.
# Example: db restore dev
#

set -e

source "${BASH_SOURCE%/*}/.helpers.sh"

ENV=$(get_env_suffix "$2")
DUMPS_FOLDER="myapp_postgres_dumps_$ENV"
DUMP_PREFIX="dump_$ENV"

case $1 in
dump)
  echo "Dumping database to $DUMPS_FOLDER"
  mkdir -p ~/"$DUMPS_FOLDER"

  docker exec -t postgres_db_myapp_"$ENV" pg_dump --data-only -T alembic_version -U postgres | gzip >~/"$DUMPS_FOLDER"/"$DUMP_PREFIX""_$(date +%d-%m-%Y"_"%H_%M_%S)".gz
  ;;

restore)
  _confirm "Do you want to restore from $DUMPS_FOLDER in the $ENV environment?"
  echo "Restoring database from $DUMPS_FOLDER"
  last_bkp_file=$(find ~/"$DUMPS_FOLDER"/ -name '*.gz' | grep "$DUMP_PREFIX" | sort -r | head -n 1)

  if [ -z "$last_bkp_file" ]; then
    err "No $DUMP_PREFIX* file found in $DUMPS_FOLDER"
    exit 1
  fi

  echo "Restoring database from $last_bkp_file"
  # must get rid of everything, including alembic_version which won't be restored and needs to be updated
  # if tables have been deleted or added manually, recreate the database from scratch to avoid downgrade errors
  docker exec -it backend_myapp_"$ENV" /bin/bash -c "alembic downgrade base"
  docker exec -it backend_myapp_"$ENV" /bin/bash -c "alembic upgrade head"
  gunzip -c "$last_bkp_file" | docker exec -i postgres_db_myapp_"$ENV" psql -U postgres --dbname="$POSTGRES_DB"

  ;;
*)
  echo "Usage: $0 {dump|restore} [env]"
  exit 1
  ;;

esac
