version: "3.8"

services:
  myapp_server_e2e:
    container_name: backend_myapp_e2e
    networks:
      - traefik-net
    build:
      context: ./backend
      dockerfile: Dockerfile
    # vol rw only necessary in dev mode - hot reloading!
    volumes:
      - ./backend/logs/:/backend/logs/:rw
      - ./backend/:/backend/
    command: gunicorn -w 1 -k uvicorn.workers.UvicornWorker app.api.server:app --bind 0.0.0.0:${SERVER_PORT_E2E}
    env_file:
      - ./backend/.env # modify default env, e.g. POSTGRES_DB for safety
    environment:
      APP_ENV: e2e
      # ! The whole E2E test suite is run without TESTING=1 to mimic production
      # TESTING: 1
    depends_on:
      - myapp_db_e2e
      - myapp_frontend_e2e # give some extra time for frontend to start
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.myapp-e2e.rule=Host(`myapp-backend.testing.localhost`)
      - traefik.docker.network=traefik-net
      - traefik.http.routers.myapp-e2e.entrypoints=websecure
      - traefik.http.routers.myapp-e2e.tls=true
      - traefik.http.services.myapp-e2e.loadbalancer.server.port=${SERVER_PORT_E2E}

  myapp_db_e2e:
    image: postgres:13-alpine
    container_name: postgres_db_myapp_e2e
    user: postgres
    networks:
      - traefik-net
    environment:
      PGDATA: /var/lib/postgresql/data

    # don't save postgres data to volume
    # inject vars required for image https://github.com/docker-library/docs/blob/master/postgres/README.md
    env_file:
      - ./.env
      - ./backend/.env # requires same env as backend
    ports:
      - $DB_PORT_E2E:5432
    restart: unless-stopped

  myapp_frontend_e2e:
    container_name: frontend_myapp_e2e
    networks:
      - traefik-net
    build:
      context: ./frontend
      dockerfile: Dockerfile
    # vol rw only necessary in dev mode - hot reloading!
    volumes:
      - ./frontend/:/frontend/
      - ./frontend/.env.e2e:/frontend/.env.development
    # - node_modules:/frontend/node_modules/
    env_file:
      - ./frontend/.env.e2e
      # - ./.env
    depends_on:
      - myapp_db_e2e
    restart: unless-stopped
    labels:
      # Explicitly tell Traefik to expose this container
      - traefik.enable=true
      - traefik.http.routers.myapp-react-e2e.rule=Host(`myapp-frontend.testing.localhost`)
      # we're NOT using nginx in dev Dockerfile, NOT 80
      # - traefik.port=${FRONTEND_PORT_E2E}
      - traefik.docker.network=traefik-net
      - traefik.http.routers.myapp-react-e2e.entrypoints=websecure
      - traefik.http.routers.myapp-react-e2e.tls=true
      - traefik.http.services.myapp-react-e2e.loadbalancer.server.port=${FRONTEND_PORT_E2E}

  # myapp_puppeteer:
  #   container_name: puppeteer_myapp_e2e
  #   network_mode: "host" # else it won't resolve services proxied by traefik
  #   # networks:
  #   #   - traefik-net
  #   build:
  #     context: ./e2e
  #     dockerfile: Dockerfile
  #     args:
  #       - HEADLESS=true
  #       - FRONTEND_URL=https://myapp-frontend.testing.localhost
  #   # careful with editing files while tests run
  #   volumes:
  #     - ./e2e/:/e2e/
  #   command: tail -F anything # will stay up until we explicitly run tests
  #   depends_on:
  #     - myapp_frontend_e2e
  #     - myapp_server_e2e

networks:
  traefik-net:
    name: traefik-net
    external: true
