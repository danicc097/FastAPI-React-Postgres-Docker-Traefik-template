# Code generated by sqlc. DO NOT EDIT.
# versions:
#   sqlc v1.13.0
# source: profiles.sql
import pydantic
from typing import Optional

import sqlalchemy
import sqlalchemy.ext.asyncio

from app.db.gen.queries import models


CREATE_PROFILE = """-- name: create_profile \\:one
insert into profiles (full_name, phone_number, bio, image, user_id)
  values (:p1, :p2, :p3, :p4, :p5)
returning
  profile_id, full_name, phone_number, bio, image, user_id
"""


class CreateProfileParams(pydantic.BaseModel):
    full_name: Optional[str]
    phone_number: Optional[str]
    bio: Optional[str]
    image: Optional[str]
    user_id: int


GET_PROFILE_BY_ID = """-- name: get_profile_by_id \\:one
select
  profile_id, full_name, phone_number, bio, image, user_id
from
  profiles
where
  user_id = :p1
"""


GET_PROFILE_BY_USERNAME = """-- name: get_profile_by_username \\:one
select
  profiles.profile_id,
  users.email,
  users.username,
  profiles.full_name,
  profiles.phone_number,
  profiles.bio,
  profiles.image,
  profiles.user_id
from
  profiles
  inner join users using (user_id)
where
  users.username = :p1\\:\\:text
"""


class GetProfileByUsernameRow(pydantic.BaseModel):
    profile_id: int
    email: str
    username: str
    full_name: Optional[str]
    phone_number: Optional[str]
    bio: Optional[str]
    image: Optional[str]
    user_id: int


UPDATE_PROFILE = """-- name: update_profile \\:one
update
  profiles
set
  full_name    = COALESCE(:p1, full_name),
  phone_number = COALESCE(:p2, phone_number),
  bio          = COALESCE(:p3, bio),
  image        = COALESCE(:p4, image)
where
  user_id = :p5
returning
  profile_id, full_name, phone_number, bio, image, user_id
"""


class UpdateProfileParams(pydantic.BaseModel):
    full_name: Optional[str]
    phone_number: Optional[str]
    bio: Optional[str]
    image: Optional[str]
    user_id: int


class AsyncQuerier:
    def __init__(self, conn: sqlalchemy.ext.asyncio.AsyncConnection):
        self._conn = conn

    async def create_profile(self, arg: CreateProfileParams) -> Optional[models.Profile]:
        row = (await self._conn.execute(sqlalchemy.text(CREATE_PROFILE), {
            "p1": arg.full_name,
            "p2": arg.phone_number,
            "p3": arg.bio,
            "p4": arg.image,
            "p5": arg.user_id,
        })).first()
        if row is None:
            return None
        return models.Profile(
            profile_id=row[0],
            full_name=row[1],
            phone_number=row[2],
            bio=row[3],
            image=row[4],
            user_id=row[5],
        )

    async def get_profile_by_id(self, *, user_id: int) -> Optional[models.Profile]:
        row = (await self._conn.execute(sqlalchemy.text(GET_PROFILE_BY_ID), {"p1": user_id})).first()
        if row is None:
            return None
        return models.Profile(
            profile_id=row[0],
            full_name=row[1],
            phone_number=row[2],
            bio=row[3],
            image=row[4],
            user_id=row[5],
        )

    async def get_profile_by_username(self, *, username: str) -> Optional[GetProfileByUsernameRow]:
        row = (await self._conn.execute(sqlalchemy.text(GET_PROFILE_BY_USERNAME), {"p1": username})).first()
        if row is None:
            return None
        return GetProfileByUsernameRow(
            profile_id=row[0],
            email=row[1],
            username=row[2],
            full_name=row[3],
            phone_number=row[4],
            bio=row[5],
            image=row[6],
            user_id=row[7],
        )

    async def update_profile(self, arg: UpdateProfileParams) -> Optional[models.Profile]:
        row = (await self._conn.execute(sqlalchemy.text(UPDATE_PROFILE), {
            "p1": arg.full_name,
            "p2": arg.phone_number,
            "p3": arg.bio,
            "p4": arg.image,
            "p5": arg.user_id,
        })).first()
        if row is None:
            return None
        return models.Profile(
            profile_id=row[0],
            full_name=row[1],
            phone_number=row[2],
            bio=row[3],
            image=row[4],
            user_id=row[5],
        )
